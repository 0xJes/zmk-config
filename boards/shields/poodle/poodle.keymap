#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <zmk-helpers/helper.h>
#include <dt-bindings/zmk/pointing.h>
#include "keylabels.h"

#define LEFT_HAND_KEYS  LT3 LT2 LT1 LM4 LM3 LM2 LM1 LM0 LB4 LB3 LB2 LB1 LB0 LH0 LH1
#define RIGHT_HAND_KEYS RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RH0 RH1

#define BSE 0
#define NAV 1
#define NUM 2
#define GME 3
#define SYM 4

// behavior configuration

&caps_word { // enables kebab and snake case
	continue-list = <UNDER MINUS BSPC>;
};

&lt {
	flavor = "balanced";
	tapping-term-ms = <500>;
	quick-tap-ms = <150>;
	require-prior-idle-ms = <0>;
};

&sk {
	quick-release;
};

&mt {
	flavor = "balanced";
	tapping-term-ms = <250>;
	quick-tap-ms = <150>;
	require-prior-idle-ms = <100>;
};

ZMK_HOLD_TAP(lm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <280>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <RIGHT_HAND_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(rm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <280>;
	quick-tap-ms = <200>; 
	hold-trigger-key-positions = <LEFT_HAND_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_BEHAVIOR(qu, macro,
    wait-ms = <5>;
    tap-ms = <5>;
    bindings = <&kp Q &kp U>;
)

//        NAME    OUTPUT           COMBOS        LAYERS TIME IDLE
// ALPHA
ZMK_COMBO(z,      &kp Z,           RT1 RT3,         BSE, 30,   0) // inc
ZMK_COMBO(v,      &kp V,           RB2 RB3,         BSE, 35,   0) // inc
ZMK_COMBO(qu,     &qu,             RT1 RT2,         BSE, 20,   0)
ZMK_COMBO(q,      &kp Q,           RM0 RT1,         BSE, 35,   0)
ZMK_COMBO(j,      &kp J,           RT2 RT3,         BSE, 30,   0)
ZMK_COMBO(enie,   &kp RA(N),       RT1 RM2,         BSE, 35,   0)
ZMK_COMBO(ced,    &kp RA(C),       RM4 RT3,         BSE, 35,   0)

// CONTROL CHARACTERS
ZMK_COMBO(tab,    &kp TAB,         RM1 RM2,         BSE, 20, 180)
ZMK_COMBO(bspc,   &kp BSPC,        RM2 RM3, BSE NAV SYM, 40,  70)
ZMK_COMBO(del,    &kp DEL,         RM3 RM4, BSE NAV SYM, 60, 100)
ZMK_COMBO(ret,    &kp RET,         LM2 LM3,     BSE SYM, 30, 100)
ZMK_COMBO(esc,    &kp ESC,         LM1 LM3,     BSE SYM, 50, 180)

// SPECIAL
ZMK_COMBO(gaming, &tog GME,        LT1 RT1,     GME BSE, 50, 300)
ZMK_COMBO(caps_w, &caps_word,      LH0 LH1,         BSE, 40, 150)
ZMK_COMBO(caps_b, &kp CAPS,        RH0 RH1,         BSE, 40, 200)

// SYMBOLS: HOME CLUSTER
ZMK_COMBO(colon,  &kp COLON,       LM1 LM4,     BSE NUM, 40, 100)
ZMK_COMBO(semi,   &kp SEMI,        RM1 RM4,         BSE, 40, 100)
ZMK_COMBO(under,  &kp UNDER,       RM1 RM3,         BSE, 45, 100)

// SYMBOLS: LEFT UPPER CLUSTER
ZMK_COMBO(equal,  &kp EQUAL,       LT3 LT1,         BSE, 35,   0)
ZMK_COMBO(dqt,    &kp DQT,         LT2 LT1,         BSE, 35,   0)
ZMK_COMBO(star,   &kp STAR,        LT2 LT3,         BSE, 30,   0)
ZMK_COMBO(at,     &kp AT,          LM0 LT1,         BSE, 30,   0)
ZMK_COMBO(dllr,   &kp DLLR,        RB3 RB1,         BSE, 30,   0)
ZMK_COMBO(plus,   &kp PLUS,        LM0 LB0,         BSE, 50,   0)
ZMK_COMBO(bslh,   &kp BSLH,        LT3 LM2,         BSE, 50,   0)
ZMK_COMBO(hash,   &kp HASH,        LB3 LB1,         BSE, 50,   0)
ZMK_COMBO(tilde,  &kp TILDE,       RM0 RB0,         BSE, 50,   0)
ZMK_COMBO(apms,   &kp AMPS,        RB1 RB4,         BSE, 50,   0)
ZMK_COMBO(pipe,   &kp PIPE,        LB1 LB4,         BSE, 50,   0)
ZMK_COMBO(caret,  &kp CARET,       RB4 RB3,         BSE, 50,   0)
ZMK_COMBO(perce,  &kp PERCENT,     LB4 LB3,         BSE, 50,   0)

// DIACRITS
ZMK_COMBO(a_acc,  &kp RA(X),       LM1 LT1,         BSE, 45,   0)
ZMK_COMBO(e_acc,  &kp RA(G),       LM2 LT2,         BSE, 45,   0)
ZMK_COMBO(i_acc,  &kp RA(B),       LM3 LT3,         BSE, 45,   0)
ZMK_COMBO(o_acc,  &kp RA(DOT),     LM2 LB2,         BSE, 45,   0)
ZMK_COMBO(u_acc,  &kp RA(J),       LM1 LB1,         BSE, 45,   0)

ZMK_COMBO(grave,  &kp RA(GRAVE),   RM1 RT1,         BSE, 45,   0)
ZMK_COMBO(circum, &kp RA(N6),      RM2 RT2,         BSE, 45,   0)
ZMK_COMBO(umlaut, &kp RA(RS(SQT)), RM3 RT3,         BSE, 45,   0)
 
ZMK_LAYER(alpha,
				&kp FSLH		&kp SQT			&kp	DOT											&kp M			&kp G			&kp W
&lm LCTRL C		&lm LALT I		&lm LSHFT E		&lt NAV A		&kp COMMA		&kp K			&lt NUM H		&rm RSHFT T		&rm LALT N		&rm RCTRL S
&kp B			&kp Y			&kp O			&kp U			&kp MINUS		&kp X			&kp L			&kp D			&kp P			&kp F
								&sk LSHFT		&mt LGUI SPACE									&lt SYM R		&sk RSHFT
)

ZMK_LAYER(navigation,
				&none			&none			&none											&none			&none			&none
&kp LCTRL		&kp LALT		&kp LSHFT		&none			&none			&kp LC(PLUS)	&kp LEFT		&kp DOWN		&kp UP			&kp RIGHT
&kp LC(C)		&kp LC(V)		&kp LC(X)		&none			&none			&kp LC(MINUS)	&kp HOME		&kp PG_DN		&kp PG_UP		&kp END
								&none			&none											&none			&none
)

ZMK_LAYER(numbers,
				&kp N9			&kp N8			&trans									&none		&trans				&trans
&kp N3			&kp N2			&kp N1			&kp N0			&trans		&none		&none		&rm LSHFT RA(SEMI)	&rm LALT RA(N2)		&rm RCTRL RA(N3)
&kp N7			&kp N6			&kp N5			&kp N4			&trans		&none		&none		&kp LS(RA(N1))		&kp LS(RA(N2))		&kp LS(RA(N3))
								&trans			&trans									&trans		&trans
)

ZMK_LAYER(gaming, 
				&kp FSLH		&kp UP			&kp DOT											&kp M			&kp G			&kp W
&kp C			&kp LEFT		&kp DOWN		&kp RIGHT		&kp ESC			&kp BSPC		&kp H			&kp T			&kp N			&kp S
&kp B			&kp Y			&kp O			&kp U			&kp TAB			&kp RET			&kp L			&kp D			&kp P			&kp F
								&kp J			&kp SPACE 										&kp R			&kp Z
)

ZMK_LAYER(sym,
				&none			&kp LBKT		&kp LPAR										&none			&kp RBKT        &none
&none			&kp LPAR		&kp RA(N1)		&kp RA(FSLH)	&none			&none			&kp QMARK		&kp EXCL		&kp RPAR		&none
&none			&kp LT			&none   		&kp LBRC		&none			&none			&kp RBRC		&none			&kp GT			&none
								&none			&none											&none			&none
)
