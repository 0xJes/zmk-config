#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800
#define ZMK_POINTING_DEFAULT_SCRL_VAL 38

#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <zmk-helpers/helper.h>
#include "keylabels.h"

#define LEFT_HAND_KEYS  LT3 LT2 LT1 LM4 LM3 LM2 LM1 LM0 LB4 LB3 LB2 LB1 LB0
#define RIGHT_HAND_KEYS RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMB_KEYS      LH0 RH0

#define BSE 0
#define NAV 1
#define NUM 2
#define MOU 3
#define GME 4
#define FUN 5

/ {
    behaviors {
        ad_h: adaptive_q_qu {
            compatible = "zmk,behavior-antecedent-morph";
            #binding-cells = <0>;
            defaults = <&kp G>;
            bindings = <&qu_q Q Q>;
            antecedents = <H>;
            max-delay-ms = <250>;
        };
        ad_comma: adaptive_quote {
            compatible = "zmk,behavior-antecedent-morph";
            #binding-cells = <0>;
            defaults = <&comma>;
            bindings = <&m_sqt>;
            antecedents = <FSLH>;
            max-delay-ms = <250>;
        };
        ad_slash: adaptive_dquote {
            compatible = "zmk,behavior-antecedent-morph";
            #binding-cells = <0>;
            defaults = <&m_fslh>;
            bindings = <&m_dqt>;
            antecedents = <COMMA>;
            max-delay-ms = <250>;
        };
		
    };
};

// behavior configuration
&mmv {
	time-to-max-speed-ms = <350>;
};

&msc {
	acceleration-exponent = <1>;
	time-to-max-speed-ms = <40>;
	delay-ms = <0>;
};

&caps_word { // enables kebab and snake case
	continue-list = <UNDER MINUS BSPC>;
};

&lt {
	flavor = "balanced";
	tapping-term-ms = <250>;
	quick-tap-ms = <150>;
	require-prior-idle-ms = <100>;
};

&mt {
	flavor = "balanced";
	tapping-term-ms = <300>;
	quick-tap-ms = <180>;
	bindings = <&kp>, <&kp>;
};

ZMK_HOLD_TAP(lm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <300>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(rm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <300>;
	quick-tap-ms = <200>; 
	hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)


ZMK_MACRO(dq,     bindings = <&kp BSPC &kp Q &kp U>;)
ZMK_MACRO(dqu,     bindings = <&kp BSPC &kp Q>;)
ZMK_HOLD_TAP(qu_q,
	flavor = "tap-preferred";
	tapping-term-ms = <190>;
	bindings = <&dqu>, <&dq>;
)

ZMK_MACRO(m_sqt,     bindings = <&kp BSPC &kp SQT>;)
ZMK_MACRO(m_dqt,     bindings = <&kp BSPC &kp DQT>;)

ZMK_MACRO(gu_dr,  bindings = <&kp G &kp RA(U)>;)
ZMK_MACRO(gu_dr,  bindings = <&kp G &kp RA(U)>;)
ZMK_MACRO(au_sbf, bindings = <&kp A &kp U>;)
ZMK_MACRO(ua_sbf, bindings = <&kp U &kp A>;)

ZMK_MOD_MORPH(star_bslh,   bindings = <&kp STAR>  ,<&kp BSLH>     ;mods = <(         MOD_LALT)>;)
ZMK_MOD_MORPH(m_fslh,        bindings = <&kp FSLH>  ,<&star_bslh>   ;mods = <(MOD_LSFT|MOD_LALT)>;)

ZMK_MOD_MORPH(semi_at,     bindings = <&kp SEMI>  ,<&kp AT>       ;mods = <(         MOD_LALT)>;)
ZMK_MOD_MORPH(comma,       bindings = <&kp COMMA> ,<&semi_at>     ;mods = <(MOD_LSFT|MOD_LALT)>;)

ZMK_MOD_MORPH(minu_plus,   bindings = <&kp MINUS> ,<&kp PLUS>     ;mods = <(MOD_LSFT         )>;)
ZMK_MOD_MORPH(dot_colon,   bindings = <&kp DOT>   ,<&kp COLON>    ;mods = <(MOD_LSFT         )>;)
ZMK_MOD_MORPH(lr_par,      bindings = <&kp LPAR>  ,<&kp RPAR>     ;mods = <(         MOD_RSFT)>;)
ZMK_MOD_MORPH(lr_brc,      bindings = <&kp LBRC>  ,<&kp RBRC>     ;mods = <(         MOD_RSFT)>;)
ZMK_MOD_MORPH(lr_bkt,      bindings = <&kp LBKT>  ,<&kp RBKT>     ;mods = <(         MOD_RSFT)>;)
ZMK_MOD_MORPH(lt_gt,       bindings = <&kp LT>    ,<&kp GT>       ;mods = <(         MOD_RSFT)>;)
ZMK_MOD_MORPH(questmrks,   bindings = <&kp QMARK> ,<&kp RA(FSLH)> ;mods = <(MOD_LSFT         )>;)
ZMK_MOD_MORPH(exclmrks,    bindings = <&kp EXCL>  ,<&kp RA(N1)>   ;mods = <(MOD_LSFT         )>;)
ZMK_MOD_MORPH(under_caret, bindings = <&kp UNDER> ,<&kp CARET>    ;mods = <(MOD_LSFT         )>;)

ZMK_COMBO(z,           &kp Z,       LT1 LT3,     BSE,  65,   0) // alpha combos
ZMK_COMBO(x,           &kp X,       LT3 LT2,     BSE,  65,   0)
ZMK_COMBO(enie,        &kp RA(N),   LB3 LB1,     BSE,  65,   0)
ZMK_COMBO(gudiaresis,  &gu_dr,      LM3 LT1,     BSE,  65,   0)
ZMK_COMBO(acute_o,     &kp RA(DOT), RT1 RM2,     BSE,  80,   0)
ZMK_COMBO(acute_i,     &kp RA(B),   RT2 RM3,     BSE,  80,   0)
ZMK_COMBO(acute_a,     &kp RA(X),   RB1 RB3,     BSE,  65,   0)
ZMK_COMBO(acute_e,     &kp RA(G),   RT1 RT3,     BSE,  65,   0)
ZMK_COMBO(acute_u,     &kp RA(J),   RT2 RT3,     BSE,  90,   0)

ZMK_COMBO(escape,      &kp ESC,     LM1 LM3,     BSE,  80,  75) // horz combos
ZMK_COMBO(return,      &kp RET,     LM2 LM3, BSE NAV,  70,  75) 
ZMK_COMBO(tab,         &kp TAB,      RM1 RM2,     BSE,  45, 125)
ZMK_COMBO(under_caret, &under_caret,  RM1 RM3,     BSE,  50,  75)
ZMK_COMBO(backspace,   &kp BSPC,    RM2 RM3, BSE NAV,  80,  80)
ZMK_COMBO(delete,      &kp DEL,     RM3 RM4, BSE NAV, 140, 120)

ZMK_COMBO(percent,    &kp PRCNT,   LM0 LB0,     BSE, 100, 150) // vert combos
ZMK_COMBO(amps,       &kp AMPS,    LT1 LM1,     BSE, 100, 150)
ZMK_COMBO(tilde,      &kp TILDE,   LT2 LM2,     BSE, 100, 150)
ZMK_COMBO(bslh,       &kp BSLH,    LM2 LB2,     BSE, 100, 150)
ZMK_COMBO(ampersand,  &kp AMPS,    RT1 RM1,     BSE, 100, 150)
ZMK_COMBO(equal,      &kp EQUAL,   RT2 RM2,     BSE, 100, 150)
ZMK_COMBO(exclmrks,   &exclmrks,   RT3 RM3,     BSE, 100, 150)
ZMK_COMBO(dolar,      &kp DLLR,    RM1 RB1,     BSE, 100, 150)
ZMK_COMBO(hash,       &kp HASH,    RM2 RB2,     BSE, 100, 150)
ZMK_COMBO(questmrks,  &questmrks,  RM3 RB3,     BSE, 100, 150)

ZMK_COMBO(lbrace,     &lr_par,     LM1 LB1,     BSE, 140, 100) // diag combLs
ZMK_COMBO(rbrace,     &lr_brc,     LM3 LB2,     BSE, 140, 100)
ZMK_COMBO(langle,     &lr_bkt,     LM3 LB3,     BSE, 140, 100)
ZMK_COMBO(rangle,     &lt_gt,      LT3 LM3,     BSE, 140, 100)

ZMK_COMBO(gaming,     &tog GME,    LT1 RT1, GME BSE,  50, 200)
ZMK_COMBO(function,   &tog FUN,    LT2 RT2, FUN BSE,  50, 200)
ZMK_COMBO(capsword, &caps_word,    LM4 RM4,     BSE,  50, 200)

ZMK_LAYER(alpha,
				&kp B			&kp H			&ad_h										&ad_comma		&ad_slash			&kp J
&lm LSHFT C		&lm LALT S		&lm LCTRL N		&lt NAV T		&kp K		&dot_colon		&lt NUM A		&rm RCTRL E		&rm LALT I		&rm RSHFT M
&kp P			&kp F			&kp L			&kp D			&kp V		&minu_plus		&kp U			&kp O			&kp Y			&kp W
												&lt MOU R									&mt RGUI SPACE
)

ZMK_LAYER(navigation,
				&none			&none			&none										&none			&none			&none
&kp LSHFT		&kp LALT		&kp LCTRL		&none			&none		&kp LC(PLUS)	&kp LEFT		&kp DOWN		&kp UP			&kp RIGHT
&none			&none			&none			&none			&none		&kp LC(MINUS)	&kp HOME		&kp PG_DN		&kp PG_UP		&kp END
												&none										&none
)

ZMK_LAYER(numbers,
				&trans			&trans			&trans										&trans			&trans			&trans
&kp N3			&kp N2			&kp N1			&kp N0			&trans		&trans			&trans			&kp DOT			&kp COMMA		&kp MINUS
&kp N7			&kp N6			&kp N5			&kp N4			&trans		&trans			&trans			&trans			&trans			&trans
												&kp N8										&kp N9
)

ZMK_LAYER(mouse,
				&none			&none			&none										&none			&none			&none
&kp LSHFT		&mkp RCLK		&mkp MCLK		&mkp LCLK		&none		&mkp MB5		&mmv MOVE_LEFT	&mmv MOVE_DOWN	&mmv MOVE_UP	&mmv MOVE_RIGHT
&none			&none			&none			&none			&none		&mkp MB4		&msc SCRL_LEFT	&msc SCRL_DOWN	&msc SCRL_UP	&msc SCRL_RIGHT
												&none										&kp RGUI
)

ZMK_LAYER(gaming, 
				&kp B			&kp UP			&kp G  										&kp COMMA		&kp FSLH		&kp J
&kp C			&kp LEFT		&kp DOWN		&kp RIGHT		&kp ESC		&kp BSPC		&kp A			&kp E			&kp I			&kp M
&kp P			&kp F			&kp L			&kp D			&kp TAB		&kp RET			&kp U			&kp O			&kp Y			&kp W
												&kp R										&kp SPACE
)

ZMK_LAYER(function, 
				&none			&none			&none	  									&none			&none			&none
&kp F8			&kp F7			&kp F6			&kp F5			&none		&none			&kp F1			&kp F2			&kp F3			&kp F4
&none			&none			&none			&none			&none		&none			&kp F9			&kp F10			&kp F11			&kp F12
												&none										&none
)

