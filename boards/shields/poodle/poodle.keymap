#define BSE 0
#define NAV 1
#define NUM 2
#define MOU 3

#define ZMK_MOUSE_DEFAULT_SCRLRL_VAL 30

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include "zmk-helpers/helper.h"
#include "keylabels.h"

// MACROS------------------------------------------------------------------------------------------
ZMK_MACRO(au,			bindings = <&kp A &kp U>;)
ZMK_MACRO(ua,			bindings = <&kp U &kp A>;)
ZMK_MACRO(gu,			bindings = <&kp G &kp U>;)
ZMK_MACRO(gu_d,			bindings = <&kp G &kp RA(U)>;)
ZMK_MACRO(t_period,		bindings = <&kp DOT &kp DOT &kp DOT>;)
ZMK_MACRO(path_here,	bindings = <&kp DOT &kp FSLH &kp STAR>;)
ZMK_MACRO(excl_quest,	bindings = <&kp EXCL &kp QMARK>;)
ZMK_MACRO(add,			bindings = <&kp SPACE &kp PLUS  &kp SPACE>;)
ZMK_MACRO(sub,			bindings = <&kp SPACE &kp MINUS &kp SPACE>;)
ZMK_MACRO(div,			bindings = <&kp SPACE &kp FSLH  &kp SPACE>;)
ZMK_MACRO(mul,			bindings = <&kp SPACE &kp STAR  &kp SPACE>;)

ZMK_MACRO(qu,
	wait-ms = <0>;
	tap-ms = <0>;
	bindings = <&kp Q &kp U>;
)

// MISCRL--------------------------------------------------------------------------------------------
ZMK_STICKY_KEY(ss,
	bindings = <&kp>;
	release-after-ms = <2500>;
	quick-release;
	ignore-modifiers;
)

&caps_word {
    continue-list = <UNDER MINUS BSPC>;
};

// HOLD TAPS---------------------------------------------------------------------------------------

ZMK_HOLD_TAP(qu_q,
	flavor = "tap-preferred";
	tapping-term-ms = <120>;
	bindings = <&kp>, <&qu>;
)

ZMK_HOLD_TAP(gu_espgu,
	flavor = "tap-preferred";
	tapping-term-ms = <150>;
	bindings = <&gu_d>, <&gu>;
)

ZMK_HOLD_TAP(lm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <3 4 5 11 12 13 14 15 21 22 23 24 25 28 29>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(rm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <0 1 2 6 7 8 9 10 16 17 18 19 20 26 27>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(spc,
	flavor = "hold-preferred";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	bindings = <&kp>, <&kp>;
)

// SPECIAL SHIFTED KEYS----------------------------------------------------------------------------
ZMK_MOD_MORPH(comma,    bindings = <&kp COMMA>, <&excl_quest>;  mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(slash,    bindings = <&kp FSLH>,  <&path_here>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(tperiod,  bindings = <&kp DOT>,   <&t_period>;    mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(currency, bindings = <&kp DLLR>,  <&kp RA(N5)>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(RL_excl,  bindings = <&kp EXCL>,  <&kp RA(N1)>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(RL_quest, bindings = <&kp QMARK>, <&kp RA(FSLH)>; mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(LR_paren, bindings = <&kp LPAR>,  <&kp RPAR>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(LR_brace, bindings = <&kp LBRC>,  <&kp RBRC>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(LR_brack, bindings = <&kp LBKT>,  <&kp LBKT>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(LR_angle, bindings = <&kp LT>,    <&kp GT>;       mods = <(MOD_LSFT|MOD_RSFT)>;)

// ALPHA COMBOS------------------------------------------------------------------------------------
ZMK_COMBO(z,            &kp Z,  7 17, BSE     , 100,   0)
ZMK_COMBO(x,            &kp X,  9 19, BSE     , 100,   0)
ZMK_COMBO(enie,     &kp RA(N), 17 19, BSE     ,  50,   0)
ZMK_COMBO(au,             &au, 12 22, BSE     , 100,   0)
ZMK_COMBO(ua,             &ua,  3 12, BSE     , 100,   0)
ZMK_COMBO(qu,       &qu_q Q Q,  8 18, BSE     , 100,   0)
ZMK_COMBO(gu,   &gu_espgu G G,   2 9, BSE     , 100,   0)

// VERTICAL COMBOS---------------------------------------------------------------------------------
ZMK_COMBO(plus,      &kp PLUS, 11 21, BSE     ,  85,   0)
ZMK_COMBO(grave,    &kp GRAVE, 10 20, BSE     ,  85,   0)
ZMK_COMBO(and,       &kp AMPS,  5 14, BSE     ,  85,   0)
ZMK_COMBO(or,        &kp PIPE,  0  7, BSE     ,  85,   0)
ZMK_COMBO(asterisk,  &kp STAR,  4 13, BSE     ,  85,   0)
ZMK_COMBO(backslash, &kp BSLH,  1  8, BSE     ,  85,   0)
ZMK_COMBO(currency, &currency, 14 24, BSE     ,  85,   0)

// HORIZONTAL COMBOS-------------------------------------------------------------------------------
ZMK_COMBO(hash,      &kp HASH, 17 18, BSE     ,  60, 200)
ZMK_COMBO(at,          &kp AT, 23 24, BSE     ,  60, 200)
ZMK_COMBO(semi,      &kp SEMI, 18 19, BSE     ,  60, 200)
ZMK_COMBO(colon,    &kp COLON, 22 23, BSE     ,  60, 200)
ZMK_COMBO(equal,    &kp EQUAL,  1  2, BSE     ,  60, 100)
ZMK_COMBO(tilde,    &kp TILDE,  3  4, BSE     ,  60, 100)
ZMK_COMBO(caret,    &kp CARET,  4  5, BSE     ,  60, 100)
ZMK_COMBO(prcnt,    &kp PRCNT,  0  1, BSE     ,  60, 100)
ZMK_COMBO(bootl,  &bootloader,  0  5, BSE     ,  60, 100)

// HORIZONTAL COMBOS ON HOME ROW-------------------------------------------------------------------
ZMK_COMBO(escape,     &kp ESC, LM1 LM3, BSE     ,  50,  75)
ZMK_COMBO(enter,      &kp RET, LM2 LM3, BSE NAV ,  70,  75)
ZMK_COMBO(tab,        &kp TAB, RM1 RM2, BSE     ,  60,  75)
ZMK_COMBO(uscore,   &kp UNDER, RM1 RM3, BSE     , 100,  75)
ZMK_COMBO(backspace, &kp BSPC, RM2 RM3, BSE NAV , 150,  75)
ZMK_COMBO(delete,     &kp DEL, RM3 RM4, BSE NAV , 140,  75)
ZMK_COMBO(cps_wrd, &caps_word, LM2 RM2, BSE     ,  50,  75)

// DIAGONAL COMBOS---------------------------------------------------------------------------------
ZMK_COMBO(quote,      &kp SQT, LT1 LM2, BSE     , 120, 100)
ZMK_COMBO(dquote,     &kp DQT, RT1 RM2, BSE     , 120, 100)
ZMK_COMBO(parent,   &LR_paren, RM1 RB2, BSE     , 120, 100)
ZMK_COMBO(braces,   &LR_brace, LM1 LB2, BSE     , 120, 100)
ZMK_COMBO(brackets, &LR_brack, RM3 RB2, BSE     , 120, 100)
ZMK_COMBO(angles,   &LR_angle, LM3 LB2, BSE     , 120, 100)
ZMK_COMBO(excl,      &RL_excl, RT3 RM2, BSE     , 120, 100)
ZMK_COMBO(quest,    &RL_quest, LT3 LM2, BSE     , 120, 100)

ZMK_LAYER(base,
				&kp B			&kp H			&kp G										&comma			&slash			&kp J
&kp C			&lm LALT S		&lm LCTRL N		&lt NAV T		&kp K		&tperiod		&lt NUM A		&rm RCTRL E		&rm LALT I		&kp M
&kp P			&kp F			&kp L			&kp D			&kp V		&kp MINUS		&kp U			&kp O			&kp Y			&kp W
								&ss LSHFT		&lt MOU R									&spc RWIN SPACE	&ss RSHFT
)

ZMK_LAYER(navigation,
				&none			&none			&none										&kp LC(V)		&kp LC(C)		&kp LC(X)
&kp LALT		&kp LCTRL		&kp LSHFT		&none			&none		&kp LC(PLUS)	&kp LEFT		&kp DOWN		&kp UP			&kp RIGHT
&none			&none			&none			&none			&none		&kp LC(MINUS)	&kp HOME		&kp PG_DN		&kp PG_UP		&kp END
								&kp LC(Z)		&kp LC(Y)									&kp SPACE		&kp RSHFT
)

ZMK_LAYER(numbers,
				&none			&div			&mul										&none			&none			&none
&kp N3			&kp N2			&kp N1			&kp N0			&add		&none			&none			&kp DOT			&kp COMMA		&kp MINUS
&kp N7			&kp N6			&kp N5			&kp N4			&sub		&none			&none			&none			&none			&none
								&none			&kp N8										&kp N9			&kp SPACE
)

ZMK_LAYER(mouse,
				&none			&none			&none										&none			&kp DOWN		&kp UP
&none			&mkp MCLK		&mkp RCLK		&mkp LCLK		&none		&none			&mmv MOVE_LEFT	&mmv MOVE_DOWN	&mmv MOVE_UP	&mmv MOVE_RIGHT
&none			&none			&none			&none			&none		&none			&msc SCRL_LEFT	&msc SCRL_DOWN	&msc SCRL_UP	&msc SCRL_RIGHT
								&none			&none										&mkp MB4		&mkp MB5
)
