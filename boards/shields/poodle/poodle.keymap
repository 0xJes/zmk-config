// TODO: Implement caps-word behavior that shifts the minus key 
// TODO: Format combos by side
// todo implemet especial symbols with left thumb hold
// todo implement mouse layer toggling
// todo move shifted chars outside base and make them combos
// todo maybe create a box drawing layer
// todo make mouse layer tap dance on left index key

#define ZMK_MOUSE_DEFAULT_SCRL_VAL 30
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 800

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include "zmk-helpers/helper.h"
#include "keylabels.h"
#include "eurkey.h"

// LAYERS
#define BSE 0
#define NAV 1
#define NUM 2
#define MOU 3
// KEY GROUPS 
#define LEFT_HAND_KEYS LT3 LT2 LT1 LM4 LM3 LM2 LM1 LM0 LB4 LB3 LB2 LB1 LB0
#define RIGHT_HAND_KEYS RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMB_KEYS LH1 LH0 RH0 RH1
// COMMON SHORTCUTS
#define CUT      &kp LC(X)
#define PASTE    &kp LC(V)
#define COPY     &kp LC(C)
#define ZOOM_IN  &kp LC(PLUS)
#define ZOOM_OUT &kp LC(MINUS)
#define UNDO     &kp LC(Z)
#define REDO     &kp LC(Y)
// MOUSE OPERATIONS
#define WHEEL_LEFT  &msc SCRL_LEFT
#define WHEEL_UP    &msc SCRL_UP
#define WHEEL_DOWN  &msc SCRL_DOWN
#define WHEEL_RIGHT &msc SCRL_RIGHT
#define CURSOR_LEFT  &mmv MOVE_LEFT
#define CURSOR_UP    &mmv MOVE_UP
#define CURSOR_DOWN  &mmv MOVE_DOWN
#define CURSOR_RIGHT &mmv MOVE_RIGHT
#define FORWARD      &mkp MB5
#define BACK         &mkp MB4

// MACROS
ZMK_MACRO(add, bindings = <&kp SPACE &kp PLUS  &kp SPACE>;)
ZMK_MACRO(sub, bindings = <&kp SPACE &kp MINUS &kp SPACE>;)
ZMK_MACRO(div, bindings = <&kp SPACE &kp FSLH  &kp SPACE>;)
ZMK_MACRO(mul, bindings = <&kp SPACE &kp STAR  &kp SPACE>;)
ZMK_MACRO(gu_dr, bindings = <&kp G &kp U_DR>;)
ZMK_MACRO(qu, bindings = <&kp Q &kp U>;)

// BEHAVIOR CONFIGURATION
&sk {
    release-after-ms = <2000>;
    quick-release; 
    ignore-modifiers;
};

&caps_word {
    continue-list = <UNDER MINUS BSPC>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <300>;
    quick-tap-ms = <150>;
};

&mt {
	flavor = "balanced";
	tapping-term-ms = <150>;
	quick-tap-ms = <180>;
	bindings = <&kp>, <&kp>;
};

&mmv {
	time-to-max-speed-ms = <350>;
};

// HOLD TAPS
ZMK_HOLD_TAP(lm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <350>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(rm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <350>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(qu_q,
	flavor = "tap-preferred";
	tapping-term-ms = <190>;
	bindings = <&kp>, <&qu>;
)

ZMK_HOLD_TAP(lsf,
	flavor = "balanced";
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	bindings = <&kp>, <&sk>;
)

ZMK_HOLD_TAP(qhold,
	flavor = "hold-preferred";
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	bindings = <&mo>, <&kp>;
)

// Keys with special shifted versions--------------------------------------------------------------
ZMK_MOD_MORPH(sft_capsw,  bindings = <&sk RSFT>,  <&caps_word>; mods = <(         MOD_RSFT)>;)
ZMK_MOD_MORPH(minu_plus,  bindings = <&kp MINUS>, <&kp PLUS>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(fslh_star,  bindings = <&kp FSLH>,  <&kp STAR>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(dot_colon,  bindings = <&kp DOT>,   <&kp COLON>;  mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(comma_semi, bindings = <&kp COMMA>, <&kp SEMI>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(lpar_rpar,  bindings = <&kp LPAR>,  <&kp RPAR>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(lbrc_rbrc,  bindings = <&kp LBRC>,  <&kp RBRC>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(lbkt_rbkt,  bindings = <&kp LBKT>,  <&kp RBKT>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(lt_gt,      bindings = <&kp LT>,    <&kp GT>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(sqt_dqt,    bindings = <&kp SQT>,   <&kp DQT>;    mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(rl_qmark,   bindings = <&kp QMARK>, <&kp OQMARK>; mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(rl_excl,    bindings = <&kp EXCL>,  <&kp OEXCL>;  mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(amps_pipe,  bindings = <&kp AMPS>,  <&kp PIPE>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(equl_tild,  bindings = <&kp EQUAL>, <&kp TILDE>;  mods = <(MOD_LSFT|MOD_RSFT)>;)

// ALPHA COMBOS
ZMK_COMBO(z,             &kp Z, LT1 LT3, BSE    , 150,   0)
ZMK_COMBO(x,             &kp X, LT3 LT2, BSE    , 150,   0)
// HOME ROW COMBOS
ZMK_COMBO(ret,         &kp RET, LM2 LM3, BSE NAV,  70,  75)
ZMK_COMBO(tab,         &kp TAB, RM1 RM2, BSE    ,  60,  75)
ZMK_COMBO(esc,         &kp ESC, LM1 LM3, BSE    ,  80,  75) 
ZMK_COMBO(und,       &kp UNDER, RM1 RM3, BSE    ,  50,  75)
ZMK_COMBO(backspace,  &kp BSPC, RM2 RM3, BSE NAV, 150,  75)
ZMK_COMBO(delete,      &kp DEL, RM3 RM4, BSE NAV, 180, 120)
ZMK_COMBO(bootl,   &bootloader, LT3 RT3, BSE    ,  50, 150)
ZMK_COMBO(quotes,     &sqt_dqt, RT1 RT2,     BSE, 140, 100)
// VERTICAL COMBOS 
ZMK_COMBO(percent,   &kp PRCNT, LT1 LM1,     BSE, 100,   0)
ZMK_COMBO(caret,     &kp CARET, RT1 RM1,     BSE, 100,   0)
ZMK_COMBO(dolar,      &kp DLLR, RM1 RB1,     BSE, 100,   0)
ZMK_COMBO(euro,       &kp EURO, LM1 LB1,     BSE,  50,  75)
ZMK_COMBO(hash,       &kp HASH, RM2 RB2,     BSE, 100,   0)
ZMK_COMBO(backslash,  &kp BSLH, LM2 LB2,     BSE, 100,   0)
ZMK_COMBO(at,           &kp AT, RT2 RM2,     BSE, 100,   0)
ZMK_COMBO(grave,     &kp GRAVE, LT2 LM2,     BSE, 100,   0)
// DIAGONAL COMBOS
ZMK_COMBO(parent,   &lpar_rpar, RM1 RB2,     BSE, 140, 100)
ZMK_COMBO(braces,   &lbrc_rbrc, LM1 LB2,     BSE, 140, 100)
ZMK_COMBO(brakets,  &lbkt_rbkt, RM3 RB2,     BSE, 140, 100)
ZMK_COMBO(angles,       &lt_gt, LM3 LB2,     BSE, 140, 100)
ZMK_COMBO(qmark,     &rl_qmark, RT1 RM2,     BSE, 140, 100)
ZMK_COMBO(excl,       &rl_excl, RT3 RM2,     BSE, 140, 100)
ZMK_COMBO(and_or,   &amps_pipe, LT1 LM2,     BSE, 140, 100)
ZMK_COMBO(equl_tild,&equl_tild, LT3 LM2,     BSE, 140, 100)

ZMK_LAYER(base,
			&kp B		&qhold 4 H	&kp G							&comma_semi	&fslh_star	&kp J
&lm LSHFT C	&lm LALT S	&lm LCTRL N	&lt NAV T	&kp K	&dot_colon	&lt NUM A	&rm RCTRL E	&rm LALT I	&rm RSHFT M
&kp P		&kp F		&kp L		&lt MOU D	&kp V	&minu_plus	&lt 4 U		&kp O		&kp Y		&kp W
						&sk LSHFT	&lt 5 R							&rm RGUI SPACE	&sft_capsw
)

ZMK_LAYER(navigation,
			&none		&none		&none							PASTE		COPY		CUT
&kp LSHFT	&kp LALT	&kp LCTRL	&none		&none	ZOOM_IN		&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT
&none		&none		&none		&none		&none	ZOOM_OUT	&kp HOME	&kp PG_DN	&kp PG_UP	&kp END
						REDO		UNDO							&kp SPACE	&kp RSHFT
)

ZMK_LAYER(numbers,
			&none		&div		&mul							&none		&none		&none
&kp N3		&kp N2		&kp N1		&kp N0		&add	&none		&none		&kp DOT		&kp COMMA	&kp MINUS
&kp N7		&kp N6		&kp N5		&kp N4		&sub	&none		&none		&none		&none		&none
						&none		&kp N8							&kp N9		&kp SPACE
)

ZMK_LAYER(mouse,
			&none		&none		&none							&none		&kp DOWN	&kp UP
&kp LSHFT	&kp LALT	&kp LCTRL	&mkp MCLK	&none	&none		CURSOR_LEFT	CURSOR_DOWN	CURSOR_UP	CURSOR_RIGHT
&none		BACK		FORWARD		&none		&none	&none		WHEEL_LEFT	WHEEL_DOWN	WHEEL_UP	 WHEEL_RIGHT
						&none		&none							&mkp LCLK   &mkp RCLK
)

ZMK_LAYER(q,
			&trans		&none		&qu_q Q Q						&trans		&trans		&trans
&trans		&trans		&trans		&trans		&trans	&trans		&trans		&trans		&trans		&trans
&trans		&trans		&trans		&trans		&trans	&trans		&trans		&trans		&trans		&trans
						&trans		&trans							&trans		&trans
)

ZMK_LAYER(accents,
			&trans		&trans		&kp gu_dr						&trans		&trans		&trans
&trans		&trans		&kp N_TL	&trans		&trans	&trans		&kp A_AC	&kp E_AC	&kp I_AC	&trans
&trans		&trans		&trans		&trans		&trans	&trans		&kp U_AC	&kp O_AC	&trans		&trans
						&trans		&trans							&trans		&trans
)
