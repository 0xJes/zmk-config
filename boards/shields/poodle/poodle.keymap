#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include "zmk-helpers/helper.h"

#define LAYERS 0 1 2
#define BSE 0
#define NAV 1
#define NUM 2
#define MOU 3

// MACROS------------------------------------------------------------------------------------------
ZMK_MACRO(au,         bindings = <&kp A &kp U>;)
ZMK_MACRO(ua,         bindings = <&kp U &kp A>;)
ZMK_MACRO(gu,         bindings = <&kp G &kp U>;)
ZMK_MACRO(gu_d,       bindings = <&kp G &kp RA(U)>;)
ZMK_MACRO(t_period,   bindings = <&kp DOT &kp DOT &kp DOT>;)
ZMK_MACRO(path_here,  bindings = <&kp DOT &kp FSLH &kp STAR>;)
ZMK_MACRO(excl_quest, bindings = <&kp EXCL &kp QMARK>;)

ZMK_MACRO(qu,
	wait-ms = <0>;
	tap-ms = <0>;
	bindings = <&kp Q &kp U>;
)

ZMK_MACRO(lmou_d,
	wait-ms = <0>;
	tap-ms = <0>;
	bindings
		= <&macro_press &mo 3>
		, <&macro_press &kp D>
		, <&macro_pause_for_release>
		, <&macro_release &kp D>
		, <&macro_release &mo 3>
		;
)

// MISC--------------------------------------------------------------------------------------------
ZMK_STICKY(ss,
	bindings = <&kp>;
	release-after-ms = <2500>;
	quick-release;
	ignore-modifiers;
)

&caps_word {
    continue-list = <UNDER MINUS BSPC>;
};

// HOLD TAPS---------------------------------------------------------------------------------------
ZMK_HOLD_TAP(qu_q,     bindings = <&kp>, <&qu>;   tapping-term-ms = <200>;)
ZMK_HOLD_TAP(msl,  bindings = <&kp>, <&lmou_d>;   tapping-term-ms = <200>;)

ZMK_HOLD_TAP(gu_espgu,
	flavor = "tap-preferred";
	tapping-term-ms = <150>;
	bindings = <&gu_d>, <&gu>;
)

ZMK_HOLD_TAP(lhm
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <3 4 5 11 12 13 14 15 21 22 23 24 25 28 29>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(rhm
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <0 1 2 6 7 8 9 10 16 17 18 19 20 26 27>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

// SPECIAL SHIFTED KEYS----------------------------------------------------------------------------
ZMK_MOD_MORPH(comma,    bindings = <&kp COMMA>, <&excl_quest>;  mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(slash,    bindings = <&kp FSLH>,  <&path_here>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(tperiod,  bindings = <&kp DOT>,   <&t_period>;    mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(currency, bindings = <&kp DLLR>,  <&kp RA(N5)>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(RL_excl,  bindings = <&kp EXCL>,  <&kp RA(N1)>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(RL_quest, bindings = <&kp QMARK>, <&kp RA(FSLH)>; mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(LR_paren, bindings = <&kp LPAR>,  <&kp RPAR>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(LR_brace, bindings = <&kp LBRC>,  <&kp RBRC>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(LR_brack, bindings = <&kp LBKT>,  <&kp LBKT>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(LR_angle, bindings = <&kp LT>,    <&kp GT>;       mods = <(MOD_LSFT|MOD_RSFT)>;)

/*	0	1	2		 		3	4	5
6	7	8	9	10		11	12	13	14	15
16	17	18	19	20		21	22	23	24	25
			26	27		28	29			*/

// ALPHA COMBOS------------------------------------------------------------------------------------
ZMK_COMBO(z,            &kp Z,  7 17, LAYERS, 100,   0)
ZMK_COMBO(x,            &kp X,  9 19, LAYERS, 100,   0)
ZMK_COMBO(enie,     &kp RA(N),  7 19, LAYERS,  50,   0)
ZMK_COMBO(au,             &au, 12 22, LAYERS, 100,   0)
ZMK_COMBO(ua,             &ua,  3 12, LAYERS, 100,   0)
ZMK_COMBO(qu,       &qu_q Q Q,  8 18, LAYERS, 100,   0)
ZMK_COMBO(gu,   &gu_espgu G G,   2 9, LAYERS, 100,   0)

// VERTICAL COMBOS---------------------------------------------------------------------------------
ZMK_COMBO(plus,      &kp PLUS, 11 21, LAYERS, 100,   0)
ZMK_COMBO(grave,    &kp GRAVE, 10 20, LAYERS, 100,   0)
ZMK_COMBO(and,       &kp AMPS,  5 14, LAYERS, 100,   0)
ZMK_COMBO(or,        &kp PIPE,  0  7, LAYERS, 100,   0)
ZMK_COMBO(asterisk,  &kp STAR,  4 13, LAYERS, 100,   0)
ZMK_COMBO(backslash, &kp BSLH,  1  8, LAYERS, 100,   0)
ZMK_COMBO(currency, &currency, 14 24, LAYERS, 100,   0)

// HORIZONTAL COMBOS-------------------------------------------------------------------------------
ZMK_COMBO(hash,      &kp HASH, 17 18, LAYERS,  60, 200)
ZMK_COMBO(at,          &kp AT, 23 24, LAYERS,  60, 200)
ZMK_COMBO(semi,      &kp SEMI, 18 19, LAYERS,  60, 200)
ZMK_COMBO(colon,    &kp COLON, 22 23, LAYERS,  60, 200)
ZMK_COMBO(equal,    &kp EQUAL,  1  2, LAYERS,  60, 100)
ZMK_COMBO(tilde,    &kp TILDE,  3  4, LAYERS,  60, 100)
ZMK_COMBO(caret,    &kp CARET,  4  5, LAYERS,  60, 100)
ZMK_COMBO(prcnt,    &kp PRCNT,  0  1, LAYERS,  60, 100)
ZMK_COMBO(bootl,  &bootloader,  0  5, LAYERS,  60, 100)

// HORIZONTAL COMBOS ON HOME ROW-------------------------------------------------------------------
ZMK_COMBO(backspace, &kp BSPC, 13 14, LAYERS, 150,  75)
ZMK_COMBO(delete,     &kp DEL, 14 15, LAYERS, 120,  75)
ZMK_COMBO(enter,      &kp RET,  7  8, LAYERS,  70,  75)
ZMK_COMBO(escape,     &kp ESC,  7  9, LAYERS,  50,  75)
ZMK_COMBO(uscore,   &kp UNDER, 12 14, LAYERS, 100,  75)
ZMK_COMBO(tab,        &kp TAB, 12 13, LAYERS,  60,  75)
ZMK_COMBO(cps_wrd, &caps_word,  8 13, LAYERS,  50,  75)

// DIAGONAL COMBOS---------------------------------------------------------------------------------
ZMK_COMBO(quote,      &kp SQT,   2 8, LAYERS, 120, 100)
ZMK_COMBO(dquote,     &kp DQT,  3 13, LAYERS, 120, 100)
ZMK_COMBO(parent,   &LR_paren, 12 23, LAYERS, 120, 100)
ZMK_COMBO(braces,   &LR_brace,  9 18, LAYERS, 120, 100)
ZMK_COMBO(brackets, &LR_brack, 14 23, LAYERS, 120, 100)
ZMK_COMBO(angles,   &LR_angle,  7 18, LAYERS, 120, 100)
ZMK_COMBO(excl,      &RL_excl,  5 13, LAYERS, 120, 100)
ZMK_COMBO(quest,    &RL_quest,  0  8, LAYERS, 120, 100)

ZMK_LAYER(base,
			&kp B		&kp H			&kp G							&comma		&slash			&kp J
&kp C		&lhm LALT S	&lhm LCTRL N	&lt 1 T		&kp K	&tperiod	&lt 2 A		&rhm RCTRL E	&rhm LALT I	&kp M
&kp P		&kp F		&kp L			&msl D		&kp V	&kp MINUS	&kp U		&kp O			&kp Y		&kp W
						&ss LSHFT		&lt RA(APOS) R					&mt RWIN SPACE	&ss RSHFT
)

ZMK_LAYER(navigation,
			&none		&none		&none								&kp LC(V)	&kp LC(C)	&kp LC(X)
&kp LALT	&kp LCTRL	&kp LSHFT	&none		&none	&kp LC(PLUS)	&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT
&none		&none		&none		&none		&none	&kp LC(MINUS)	&kp HOME	&kp PG_DN	&kp PG_UP	&kp END
						&kp LC(Z)	&kp LC(Y)					 		&kp SPACE	&kp RSHFT
)

ZMK_LAYER(numbers,
			&kp FSLH	&kp STAR	&kp PLUS					&none		&none		&none
&kp N4		&kp N3		&kp N2		&kp N1		&none	&none	&none		&kp DOT		&kp COMMA	&kp MINUS
&kp N8		&kp N7		&kp N6		&kp N5		&none	&none	&none		&none		&none		&none
						&kp N9		&kp N0						&kp SPACE	&none
)

ZMK_LAYER(mouse,
			&none		&none		&none						&none		&kp DOWN	&kp UP
&none		&none		&none		&none		&none	&none	&kp A		&kp E		&kp I		&kp M
&none		&kp LALT	&kp LCTRL	&none		&none	&none	&mkp MB4	&kp O		&kp Y		&mkp MB5
						&none		&mkp RCLK					&mkp LCLK	&mkp MCLK
)
