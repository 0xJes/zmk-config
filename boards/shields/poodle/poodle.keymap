#define ZMK_POINTING_DEFAULT_MOVE_VAL 1700
#define ZMK_POINTING_DEFAULT_SCRL_VAL 38

#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <zmk-helpers/helper.h>
#include "keylabels.h"

#define LEFT_HAND_KEYS  LT3 LT2 LT1 LM4 LM3 LM2 LM1 LM0 LB4 LB3 LB2 LB1 LB0
#define RIGHT_HAND_KEYS RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMB_KEYS      LH0 RH0

#define BSE 0
#define NAV 1
#define NUM 2
#define MOU 3
#define GME 4
#define FUN 5


// behavior configuration
&mmv {
	time-to-max-speed-ms = <350>;
};

&msc {
	acceleration-exponent = <1>;
	time-to-max-speed-ms = <40>;
	delay-ms = <0>;
};

&caps_word { // enables kebab and snake case
	continue-list = <UNDER MINUS BSPC>;
};

&lt {
	flavor = "balanced";
	tapping-term-ms = <250>;
	quick-tap-ms = <150>;
	require-prior-idle-ms = <100>;
};

&mt {
	flavor = "balanced";
	tapping-term-ms = <300>;
	quick-tap-ms = <180>;
	bindings = <&kp>, <&kp>;
};

ZMK_HOLD_TAP(lm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <300>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(rm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <300>;
	quick-tap-ms = <200>; 
	hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_MACRO(M_gu, bindings = <&kp G &kp RA(U)>;)
ZMK_MACRO(M_qu, bindings = <&kp Q &kp U>;)

//        NAME        OUTPUT        COMBOS    LAYERS TIME IDLE
ZMK_COMBO(z,          &kp Z,        LT1 LT3,     BSE,  65,   0) // alpha combos
ZMK_COMBO(x,          &kp X,        LT3 LT2,     BSE,  65,   0)
// ZMK_COMBO(q,          &kp Q,        LM2 LM3,     BSE,  70, 250)
ZMK_COMBO(qu,         &M_qu,        LB1 LB2,     BSE,  70,   0)
ZMK_COMBO(enie,       &kp RA(N),    LB3 LB1,     BSE,  65,   0)
ZMK_COMBO(m_gu,       &M_gu,        LM3 LT1,     BSE, 100,   0)

ZMK_COMBO(tab,        &kp TAB,      RM1 RM2,     BSE,  45, 125) // control characters
ZMK_COMBO(under,      &kp UNDER,    RM1 RM3,     BSE,  50,  75)
ZMK_COMBO(backspace,  &kp BSPC,     RM2 RM3, BSE NAV,  80,  80)
ZMK_COMBO(delete,     &kp DEL,      RM3 RM4, BSE NAV, 140, 120)
ZMK_COMBO(ret,        &kp RET,      LM2 LM3, BSE NAV,  80,  80)
ZMK_COMBO(esc,        &kp ESC,      LM1 LM3, BSE NAV,  80,  80)

ZMK_COMBO(amps,       &kp AMPS,     RT1 RT2 RT3, BSE, 150,   0) // triple key combos: symbols
ZMK_COMBO(pipe,       &kp PIPE,     LT1 LT2 LT3, BSE, 150,   0)
ZMK_COMBO(dolar,      &kp DLLR,     RB3 RB2 RB1, BSE,  50, 150)
ZMK_COMBO(hash,       &kp HASH,     LB3 LB2 LB1, BSE, 100,   0)
ZMK_COMBO(colon,      &kp COLON,    RT1 RT3,     BSE,  50,   0)
ZMK_COMBO(semi,       &kp SEMI,     RB1 RB3,     BSE, 150,   0)
ZMK_COMBO(bslh,       &kp BSLH,     LM0 LM1,     BSE, 150,   0)
ZMK_COMBO(star,       &kp STAR,     RM3 RT2,     BSE, 150,   0)
ZMK_COMBO(sqt,        &kp SQT,      RT1 RT2,     BSE, 100,   0)
ZMK_COMBO(dqt,        &kp DQT,      RT2 RT3,     BSE, 100,   0)
ZMK_COMBO(plus,       &kp PLUS,     RB0 RB1,     BSE, 150,   0)
ZMK_COMBO(equal,      &kp EQUAL,    RB0 RM1,     BSE, 100,   0)
ZMK_COMBO(at,         &kp AT,       RM0 RT1,     BSE, 150,   0)

// layer switchers
ZMK_COMBO(gaming,     &tog GME,     LT1 RT1, GME BSE, 100,   0)
ZMK_COMBO(capsword,   &caps_word,   LM4 RM4,     BSE, 100,   0)

// vertical combos
ZMK_COMBO(lbrc,       &kp LBRC,     LT1 LM1,     BSE, 100,   0)
ZMK_COMBO(lpar,       &kp LPAR,     LM1 LB1,     BSE, 100,   0)
ZMK_COMBO(lt,         &kp LT,       LT2 LM2,     BSE, 100,   0)
ZMK_COMBO(lbkt,       &kp LBKT,     LM2 LB2,     BSE, 100,   0)
ZMK_COMBO(lexcl,      &kp RA(N1),   LT3 LM3,     BSE, 100,   0)
ZMK_COMBO(lqmark,     &kp RA(FSLH), LM3 LB3,     BSE, 100,   0)
ZMK_COMBO(rbrc,       &kp RBRC,     RT1 RM1,     BSE, 100,   0)
ZMK_COMBO(rpar,       &kp RPAR,     RM1 RB1,     BSE, 100,   0)
ZMK_COMBO(gt,         &kp GT,       RT2 RM2,     BSE, 100,   0)
ZMK_COMBO(rbkt,       &kp RBKT,     RM2 RB2,     BSE, 100,   0)
ZMK_COMBO(rexcl,      &kp EXCL,     RT3 RM3,     BSE, 100,   0)
ZMK_COMBO(rqmark,     &kp QMARK,    RM3 RB3,     BSE, 100,   0)
ZMK_COMBO(tilde,      &kp TILDE,    LM0 LB0,     BSE, 100,   0) 
ZMK_COMBO(grave,      &kp GRAVE,    RM0 RB0,     BSE, 100,   0) 
ZMK_COMBO(percent,    &kp PRCNT,    LM4 LB4,     BSE, 100,   0)
ZMK_COMBO(caret,      &kp CARET,    RM4 RB4,     BSE, 100,   0)

ZMK_LAYER(alpha,
				&kp B			&kp H			&kp G										&kp COMMA		&kp FSLH		&kp J
&lm LSHIFT C	&lm LALT S		&lm LCTRL N		&lt NAV T		&kp K		&kp DOT			&lt NUM A		&rm RCTRL E		&rm LALT I		&rm RSHFT M
&kp P			&kp F			&kp L			&kp D			&kp V		&kp MINUS		&kp U			&kp O			&kp Y			&kp W
								&kp RA(SQT)		&lt MOU R									&mt RGUI SPACE  &key_repeat
)


ZMK_LAYER(navigation,
				&none			&none			&none										&none			&none			&none
&kp LSHFT		&kp LALT		&kp LCTRL		&none			&none		&kp LC(PLUS)	&kp LEFT		&kp DOWN		&kp UP			&kp RIGHT
&none			&none			&none			&none			&none		&kp LC(MINUS)	&kp HOME		&kp PG_DN		&kp PG_UP		&kp END
								&none			&none										&none			&none
)

ZMK_LAYER(numbers,
				&trans			&trans			&trans										&trans			&trans			&trans
&kp N3			&kp N2			&kp N1			&kp N0			&trans		&trans			&trans			&kp DOT			&kp COMMA		&kp MINUS
&kp N7			&kp N6			&kp N5			&kp N4			&trans		&trans			&trans			&trans			&trans			&trans
								&none			&kp N8										&kp N9          &none
)

ZMK_LAYER(mouse,
				&none			&none			&none										&none			&none			&none
&kp LSHFT		&mkp RCLK		&mkp MCLK		&mkp LCLK		&none		&mkp MB5		&mmv MOVE_LEFT	&mmv MOVE_DOWN	&mmv MOVE_UP	&mmv MOVE_RIGHT
&none			&none			&none			&none			&none		&mkp MB4		&msc SCRL_LEFT	&msc SCRL_DOWN	&msc SCRL_UP	&msc SCRL_RIGHT
								&none			&none										&kp RGUI        &none
)

ZMK_LAYER(gaming, 
				&kp Q			&kp UP			&kp E  										&kp COMMA		&kp FSLH		&kp J
&kp TAB			&kp LEFT		&kp DOWN		&kp RIGHT		&kp ESC		&kp BSPC		&kp A			&kp E			&kp I			&kp M
&kp Z			&kp X			&kp C			&kp V			&kp TAB		&kp RET			&kp U			&kp O			&kp Y			&kp W
								&kp X			&kp R										&kp SPACE		&kp Z
)


