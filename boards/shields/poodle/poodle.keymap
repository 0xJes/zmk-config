#include "zmk-helpers/helper.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define VERT_TIMEOUT 80
#define HORZ_TIMEOUT 60
#define DIAG_TIMEOUT 120
#define HOME_TIMEOUT 50

#define HORZ_IDLE 200
#define ALPHA_IDLE 0
#define DEF_IDLE 100
#define HOME_IDLE 75
#define COMBO_LAYERS 0 1 2 3


/ {
	macros {
		ZMK_MACRO(macro_qu, bindings = <&kp Q &kp U>;)
		ZMK_MACRO(macro_au, bindings = <&kp A &kp U>;)
		ZMK_MACRO(macro_ua, bindings = <&kp U &kp A>;)
		ZMK_MACRO(macro_gu, bindings = <&kp G &kp U>;)
		ZMK_MACRO(macro_gu_diaresis, bindings = <&kp G &kp RA(U)>;)
		ZMK_MACRO(macro_triple_period, bindings = <&kp PERIOD &kp PERIOD &kp PERIOD>;)
		ZMK_MACRO(macro_path_here, bindings = <&kp PERIOD &kp FSLH &kp STAR>;)
		ZMK_MACRO(macro_excl_quest, bindings = <&kp EXCLAMATION &kp QUESTION>;)
		ZMK_MACRO(macro_mouse_layer_hack, bindings = <&kp D &mo 3>;)
	};

	behaviors {
		lhm: left_home_row_mod {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			require-prior-idle-ms = <100>;
			tapping-term-ms = <250>;
			quick-tap-ms = <200>;
			hold-trigger-key-positions = <3 4 5 11 12 13 14 15 21 22 23 24 25 28 29>;
			hold-trigger-on-release;
			bindings = <&kp>, <&kp>;
		};
		rhm: right_home_row_mod {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			require-prior-idle-ms = <100>;
			tapping-term-ms = <250>;
			quick-tap-ms = <200>;
			hold-trigger-key-positions = <0 1 2 6 7 8 9 10 16 17 18 19 20 26 27>;
			hold-trigger-on-release;
			bindings = <&kp>, <&kp>;
		};
		mse_l: mouse_layer_hack {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			require-prior-idle-ms = <100>;
			tapping-term-ms = <250>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&macro_mouse_layer_hack>;
		};
		ss: sticky_shift {
			compatible = "zmk,behavior-sticky-key";
			#binding-cells = <1>;
			bindings = <&kp>;
			release-after-ms = <2500>;
			quick-release;
			ignore-modifiers;
		};
		holdtap_qu: holdtap_qu {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&macro_qu>, <&kp>;
			tapping-term-ms = <200>;
		};
		holdtap_gu: holdtap_gu {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&macro_gu>, <&macro_gu_diaresis>;
			tapping-term-ms = <200>;
		};

// PAIRED SYMBOLS AND MACROS WITH SHIFTS
		parent_pair: parent_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LPAR>, <&kp RPAR>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		brace_pair: brace_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LBRC>, <&kp RBRC>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		bracket_pair: bracket_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LBKT>, <&kp RBKT>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		angle_pair: angle_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LT>, <&kp GT>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		question_pair: question_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp QUESTION>, <&kp RA(FSLH)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		exclamation_pair: exclamation_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp EXCLAMATION>, <&kp RA(N1)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		dolar_euro: currency_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp DOLLAR>, <&kp RA(N5)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		tperiod: tperiod {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp PERIOD>, <&macro_triple_period>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		slash: slash {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp FSLH>, <&macro_path_here>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		comma: comma {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp COMMA>, <&macro_excl_quest>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
	};

	combos {
		compatible = "zmk,combos";
// HORIZONTAL COMBOS ON HOME ROW
		combo_bootloader {
			bindings = <&bootloader>;
			key-positions = <1 2 3 4>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <70>;
		};
		combo_backspace {
			bindings = <&kp BACKSPACE>;
			key-positions = <13 14>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <150>;
		};
		combo_delete {
			bindings = <&kp DELETE>;
			key-positions = <14 15>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <120>;
		};
		combo_return {
			bindings = <&kp RET>;
			key-positions = <7 8>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <70>;
		};
		combo_escape {
			bindings = <&kp ESCAPE>;
			key-positions = <7 9>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <50>;
		};
		combo_underscore {
			bindings = <&kp UNDER>;
			key-positions = <12 14>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <100>;
		};
		combo_tab {
			bindings = <&kp TAB>;
			key-positions = <12 13>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <60>;
		};
	};
};

ZMK_LAYER(base,
		&kp B		&kp H			&kp G							&comma		&slash			&kp J
&kp C	&lhm LALT S	&lhm LCTRL N	&lt 1 T		&kp K	&tperiod	&lt 2 A		&rhm RCTRL E	&rhm LALT I	&kp M
&kp P	&kp F		&kp L			&mse_l D D	&kp V	&kp MINUS	&kp U		&kp O			&kp Y		&kp W
					&ss LSHFT		&lt RA(APOS) R					&mt RWIN SPACE	&ss RSHFT
)

ZMK_LAYER(navigation,
		&none		&none		&none								&kp LC(C)	&kp LC(V)	&kp LC(X)
&none	&kp LALT	&kp LCTRL	&none		&none	&kp LC(PLUS)	&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT
&none	&none		&none		&none		&none	&kp LC(MINUS)	&kp HOME	&kp PG_DN	&kp PG_UP	&kp END
					&kp LSHFT	&none								&kp LC(Z)	&kp LC(Y)
)

ZMK_LAYER(numbers,
		&kp FSLH	&kp STAR	&kp PLUS					&none		&none		&none
&kp N4	&kp N3		&kp N2		&kp N1		&none	&none	&none		&kp PERIOD	&kp COMMA	&kp MINUS
&kp N8	&kp N7		&kp N6		&kp N5		&none	&none	&none		&none		&none		&none
					&kp N9  	&kp N0						&kp SPACE	&none
)

ZMK_LAYER(mouse,
		&none		&none		&none					&none		&kp DOWN	&kp UP
&none	&none		&none		&none	&none	&none	&kp A		&kp E		&kp I	&kp M
&none	&kp LALT	&kp LCTRL	&kp D	&none	&none	&mkp MB4	&kp O		&kp Y	&mkp MB5
					&none		&mkp RCLK				&mkp LCLK	&mkp MCLK
)

// Alpha combos
ZMK_COMBO(z,            &kp Z,	7 17,	COMBO_LAYERS,	VERT_TIMEOUT)
ZMK_COMBO(x,            &kp X,	9 19,	COMBO_LAYERS,	VERT_TIMEOUT)
// ZMK_COMBO(qu,   &holdtap_qu Q,	8 18,	COMBO_LAYERS,   VERT_TIMEOUT)
ZMK_COMBO(qu,           &kp Q,	8 18,	COMBO_LAYERS,   VERT_TIMEOUT)

// ZMK_COMBO(gu, &holdtap_gu G G,   2 9,	COMBO_LAYERS,	VERT_TIMEOUT)
ZMK_COMBO(au,       &macro_au, 12 22,	COMBO_LAYERS,	VERT_TIMEOUT)
ZMK_COMBO(ua,       &macro_ua,  3 12,	COMBO_LAYERS,	VERT_TIMEOUT)
// ZMK_COMBO(enie,     &kp RA(N), 7 19>,	COMBO_LAYERS,   HORZ_TIMEOUT, 50)

// Vertical combos
ZMK_COMBO(plus,          &kp PLUS, 11 21, COMBO_LAYERS, VERT_TIMEOUT)
ZMK_COMBO(grave,        &kp GRAVE, 10 20, COMBO_LAYERS, VERT_TIMEOUT)
ZMK_COMBO(ampersand,     &kp AMPS,  5 14, COMBO_LAYERS, VERT_TIMEOUT)
ZMK_COMBO(pipe,          &kp PIPE,  0  7, COMBO_LAYERS, VERT_TIMEOUT)
ZMK_COMBO(star,          &kp STAR,  4 13, COMBO_LAYERS, VERT_TIMEOUT)
ZMK_COMBO(backslash,     &kp BSLH,  1  8, COMBO_LAYERS, VERT_TIMEOUT)
ZMK_COMBO(currency,   &dolar_euro, 14 24, COMBO_LAYERS, VERT_TIMEOUT)

// Horizontal combos
ZMK_COMBO(hash,      &kp HASH, 17 18, COMBO_LAYERS, HORZ_TIMEOUT, HORZ_IDLE)
ZMK_COMBO(at,          &kp AT, 23 24, COMBO_LAYERS, HORZ_TIMEOUT, HORZ_IDLE)
ZMK_COMBO(semicolon, &kp SEMI, 18 19, COMBO_LAYERS, HORZ_TIMEOUT, HORZ_IDLE)
ZMK_COMBO(colon,    &kp COLON, 22 23, COMBO_LAYERS, HORZ_TIMEOUT, HORZ_IDLE)
ZMK_COMBO(cps_wrd, &caps_word, 26 27, COMBO_LAYERS,          150,       100)
ZMK_COMBO(equal,    &kp EQUAL,   1 2, COMBO_LAYERS, HORZ_TIMEOUT,  DEF_IDLE)
ZMK_COMBO(tilde,    &kp TILDE,   3 4, COMBO_LAYERS, HORZ_TIMEOUT,  DEF_IDLE)
ZMK_COMBO(caret,    &kp CARET,   4 5, COMBO_LAYERS, HORZ_TIMEOUT,  DEF_IDLE)
ZMK_COMBO(prcnt,  &kp PERCENT,   0 1, COMBO_LAYERS, HORZ_TIMEOUT,  DEF_IDLE)

// Diagonal combos
ZMK_COMBO(quote,          &kp SQT,   2 8, COMBO_LAYERS, DIAG_TIMEOUT, DEF_IDLE)
ZMK_COMBO(double_quote,   &kp DQT,  3 13, COMBO_LAYERS, DIAG_TIMEOUT, DEF_IDLE)
ZMK_COMBO(parent,    &parent_pair, 12 23, COMBO_LAYERS, DIAG_TIMEOUT, DEF_IDLE)
ZMK_COMBO(braces,     &brace_pair,  9 18, COMBO_LAYERS, DIAG_TIMEOUT, DEF_IDLE)
ZMK_COMBO(brackets, &bracket_pair, 14 23, COMBO_LAYERS, DIAG_TIMEOUT, DEF_IDLE)
ZMK_COMBO(angles,     &angle_pair,  7 18, COMBO_LAYERS, DIAG_TIMEOUT, DEF_IDLE)
ZMK_COMBO(excl, &exclamation_pair,  5 13, COMBO_LAYERS, DIAG_TIMEOUT, DEF_IDLE)
ZMK_COMBO(quest,   &question_pair,  0  8, COMBO_LAYERS, DIAG_TIMEOUT, DEF_IDLE)
