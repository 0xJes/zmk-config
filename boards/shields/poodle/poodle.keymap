// TODO: Ordered combos instead of shft+combo
// TODO: AU sfb mitigation
// TODO: Move important vert combos to horz combos
// TODO: Implement caps-word behavior that shifts the minus key 
// TODO: Use ACS for hrm on all layers
// TODO: Format combos by side

#define ZMK_MOUSE_DEFAULT_SCRL_VAL 30

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include "zmk-helpers/helper.h"
#include "keylabels.h"

// Layers------------------------------------------------------------------------------------------
#define BSE 0
#define NAV 1
#define NUM 2
#define MOU 3

// All keys in each side---------------------------------------------------------------------------
#define LEFT_HAND_KEYS LT3 LT2 LT1 LM4 LM3 LM2 LM1 LM0 LB4 LB3 LB2 LB1 LB0
#define RIGHT_HAND_KEYS RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMB_KEYS LH1 LH0 RH0 RH1

// Common shortcuts--------------------------------------------------------------------------------
#define CUT      &kp LC(X)
#define PASTE    &kp LC(V)
#define COPY     &kp LC(C)
#define ZOOM_IN  &kp LC(PLUS)
#define ZOOM_OUT &kp LC(MINUS)
#define UNDO     &kp LC(Z)
#define REDO     &kp LC(Y)

// Mouse operations--------------------------------------------------------------------------------
#define WHEEL_LEFT  &msc SCRL_LEFT
#define WHEEL_UP    &msc SCRL_UP
#define WHEEL_DOWN  &msc SCRL_DOWN
#define WHEEL_RIGHT &msc SCRL_RIGHT
#define CURSOR_LEFT  &mmv MOVE_LEFT
#define CURSOR_UP    &mmv MOVE_UP
#define CURSOR_DOWN  &mmv MOVE_DOWN
#define CURSOR_RIGHT &mmv MOVE_RIGHT
#define FORWARD      &mkp MB5
#define BACK         &mkp MB4

// Macros------------------------------------------------------------------------------------------
ZMK_MACRO(au,			bindings = <&kp A &kp U>;)
ZMK_MACRO(ua,			bindings = <&kp U &kp A>;)
ZMK_MACRO(gu,			bindings = <&kp G &kp U>;)
ZMK_MACRO(gu_d,			bindings = <&kp G &kp RA(U)>;)
ZMK_MACRO(t_period,		bindings = <&kp DOT &kp DOT &kp DOT>;)
ZMK_MACRO(add,			bindings = <&kp SPACE &kp PLUS  &kp SPACE>;)
ZMK_MACRO(sub,			bindings = <&kp SPACE &kp MINUS &kp SPACE>;)
ZMK_MACRO(div,			bindings = <&kp SPACE &kp FSLH  &kp SPACE>;)
ZMK_MACRO(mul,			bindings = <&kp SPACE &kp STAR  &kp SPACE>;)

ZMK_MACRO(qu,
	wait-ms = <0>;
	tap-ms = <0>;
	bindings = <&kp Q &kp U>;
)

// Micelaneous-------------------------------------------------------------------------------------
&sk {
    release-after-ms = <2000>;
    quick-release; 
    ignore-modifiers;
};

&caps_word {
    continue-list = <UNDER MINUS BSPC>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
};

// Hold Taps---------------------------------------------------------------------------------------

ZMK_HOLD_TAP(qu_q,
	flavor = "tap-preferred";
	tapping-term-ms = <150>;
	bindings = <&kp>, <&qu>;
)

ZMK_HOLD_TAP(hml,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(hmr,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(spc,
	flavor = "hold-preferred";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(lsf,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	bindings = <&kp>, <&sk>;
)

// Keys with special shifted versions--------------------------------------------------------------
ZMK_MOD_MORPH(currency,   bindings = <&kp DLLR>,  <&kp RA(N5)>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(sqt_dqt,    bindings = <&kp SQT>,   <&kp DQT>;      mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(amps_pipe,  bindings = <&kp AMPS>,  <&kp PIPE>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(qmrk_excl,  bindings = <&kp QMARK>, <&kp EXCL>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(eql_tld,    bindings = <&kp EQUAL>, <&kp TILDE>;    mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(crt_pcnt,   bindings = <&kp CARET>, <&kp PRCNT>;    mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(hash_bslh,  bindings = <&kp HASH>,  <&kp BSLH>;    mods = <(MOD_LSFT|MOD_RSFT)>;)

ZMK_MOD_MORPH(minu_plus,  bindings = <&kp MINUS>, <&kp PLUS>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(fslh_star,  bindings = <&kp FSLH>,  <&kp STAR>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(dot_colon,  bindings = <&kp DOT>,  <&kp COLON>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(comma_semi, bindings = <&kp COMMA>, <&kp SEMI>;     mods = <(MOD_LSFT|MOD_RSFT)>;)

ZMK_MOD_MORPH(sft_capsw,
    bindings = <&sk RSFT>, <&caps_word>;
    mods = <(MOD_RSFT)>;
)

// Combos: Alpha-----------------------------------------------------------------------------------
ZMK_COMBO(z,              &kp Z, LT1 LT3, BSE    , 150,   0) // bg z
ZMK_COMBO(x,              &kp X, LT3 LT2, BSE    , 150,   0) // bh x
ZMK_COMBO(enie,       &kp RA(N), LB1 LB3, BSE    , 150,   0) // fd ñ
ZMK_COMBO(qu,         &qu_q Q Q, LM2 LT1, BSE    , 150,   0) // nb qu|q
ZMK_COMBO(a,          &kp RA(X), LT1 LM1, BSE    , 150,   0) // a, á
ZMK_COMBO(e,          &kp RA(G), LT2 LM2, BSE    , 150,   0) // e/ é
ZMK_COMBO(i,          &kp RA(B), LT3 LM3, BSE    , 150,   0) // ij í
ZMK_COMBO(o,        &kp RA(DOT), LM2 LB2, BSE    , 150,   0) // eo ó
ZMK_COMBO(u,          &kp RA(J), LM1 LB1, BSE    , 150,   0) // au ú
ZMK_COMBO(ud,         &kp RA(U), LM3 LB3, BSE    , 150,   0) // iy ü
// Combos: Home row-------------------------------------------------------------------------------
ZMK_COMBO(escape,       &kp ESC, LM1 LM3, BSE    ,  50,  75) // st esc COMBINE WITH RET
ZMK_COMBO(enter,        &kp RET, LM2 LM3, BSE NAV,  70,  75) // ei ret
ZMK_COMBO(tab,          &kp TAB, RM1 RM2, BSE    ,  60,  75) // ae tab
ZMK_COMBO(uscore,     &kp UNDER, RM1 RM3, BSE    , 100,  75) // ai _   MAKE CAPSW SHIFT THIS KEY AND USE THIS COMBO FOR ANYTHING ELSE
ZMK_COMBO(backspace,   &kp BSPC, RM2 RM3, BSE NAV, 150,  75) // ei bsp
ZMK_COMBO(delete,       &kp DEL, RM3 RM4, BSE NAV, 140, 100) // im del
// Combos: horizontal------------------------------------------------------------------------------
ZMK_COMBO(bootl,    &bootloader, LT3 RT3, BSE    ,  50, 150) // bj enter flash mode
ZMK_COMBO(sqt_dqt,     &sqt_dqt, RT2 RT3, BSE    ,  50, 150) // j/ '" MAKE ORDER DEPENDENT 
ZMK_COMBO(qmrk_excl, &qmrk_excl, RT1 RT2, BSE    ,  50, 150) // ,/ !? MAKE ADAPTIVE THEN IMPLEMENT THE OPENING VERSION WITH SHIFT
ZMK_COMBO(currency,   &currency, RB2 RB3, BSE    ,  50, 150) // j i
// Combos: Vertical--------------------------------------------------------------------------------
ZMK_COMBO(grave,      &kp GRAVE, LM4 LB4,     BSE, 100,   0) // c p
ZMK_COMBO(at,            &kp AT, LM1 LB1,     BSE, 100,   0) // c p
ZMK_COMBO(currency,    &curency, LM2 LB2,     BSE, 100,   0) // c p
ZMK_COMBO(amps,        &kp AMPS, RT3 RM3,     BSE, 100,   0) // c p
ZMK_COMBO(pipe,        &kp PIPE, LT3 LM3,     BSE, 100,   0) // c p
ZMK_COMBO(equal,      &kp EQUAL, RT2 RM2,     BSE, 100,   0) // c p
ZMK_COMBO(tilde,      &kp TILDE, LT2 LM2,     BSE, 100,   0) // c p
ZMK_COMBO(caret,      &kp CARET, RT1 RM1,     BSE, 100,   0) // c p
ZMK_COMBO(percent,    &kp PRCNT, LT1 LM1,     BSE, 100,   0) // c p
// Combos: Diagonal pairs--------------------------------------------------------------------------
ZMK_COMBO(lpar,        &kp LPAR, RM1 RB2,     BSE, 110, 100) // ao (
ZMK_COMBO(rpar,        &kp RPAR, RM3 RB2,     BSE, 110, 100) // io )
ZMK_COMBO(lbkt,        &kp LBKT, RT1 RM2,     BSE, 110, 100) // ,e [
ZMK_COMBO(rbkt,        &kp RBKT, RM2 RT3,     BSE, 110, 100) // ej ]
ZMK_COMBO(lbrc,        &kp LBRC, LM3 LB2,     BSE, 110, 100) // sl {
ZMK_COMBO(rbrc,        &kp RBRC, LB2 LM1,     BSE, 110, 100) // lt }
ZMK_COMBO(eql_tld,      &kp LT,  LT3 LM2,     BSE, 110, 100) // bn <
ZMK_COMBO(hash_bslh,    &kp GT,  LT1 LM2,     BSE, 110, 100) // ng >


ZMK_LAYER(base,
				&kp B			&kp H			&kp G										&comma_semi			&fslh_star		&kp J
&kp C			&hml LALT S		&hml LCTRL N	&lt NAV T		&kp K		&dot_colon		&lt NUM A		&hmr RCTRL E	&hmr LALT I		&kp M
&kp P			&kp F			&kp L			&kp D			&kp V		&minu_plus		&kp U			&kp O			&kp Y			&kp W
								&lsf RA(SQT)	&lt MOU R								&spc RWIN SPACE	&sft_capsw
)

ZMK_LAYER(navigation,
			&none		&none		&none							PASTE		COPY		CUT
&kp LALT	&kp LCTRL	&kp LSHFT	&none		&none	ZOOM_IN		&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT
&none		&none		&none		&none		&none	ZOOM_OUT	&kp HOME	&kp PG_DN	&kp PG_UP	&kp END
						REDO		UNDO							&kp SPACE	&kp RSHFT
)

ZMK_LAYER(numbers,
			&none		&div		&mul							&none		&none		&none
&kp N3		&kp N2		&kp N1		&kp N0		&add	&none		&none		&kp DOT		&kp COMMA	&kp MINUS
&kp N7		&kp N6		&kp N5		&kp N4		&sub	&none		&none		&none		&none		&none
						&none		&kp N8							&kp N9		&kp SPACE
)

ZMK_LAYER(mouse,
			&none		&none		&none							&none		&kp DOWN	&kp UP
&kp LALT	&kp LCTRL	&kp LSHFT	&mkp MCLK	&none	&none		CURSOR_LEFT	CURSOR_DOWN	CURSOR_UP	CURSOR_RIGHT
&none		BACK		FORWARD		&none		&none	&none		WHEEL_LEFT	WHEEL_DOWN	WHEEL_UP	 WHEEL_RIGHT
						&none		&none							&mkp LCLK   &mkp RCLK
)
