#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include "zmk-helpers/helper.h"

#define TO_V 100
#define TO_H 60
#define TO_D 120

#define HORZ_IDLE 200
#define ALPHA_IDLE 0
#define DEF_IDLE 100
#define HOME_IDLE 75
#define LAYERS 0 1 2

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
	behaviors {
		lhm: left_home_row_mod {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			require-prior-idle-ms = <100>;
			tapping-term-ms = <250>;
			quick-tap-ms = <200>;
			hold-trigger-key-positions = <3 4 5 11 12 13 14 15 21 22 23 24 25 28 29>;
			hold-trigger-on-release;
			bindings = <&kp>, <&kp>;
		};
		rhm: right_home_row_mod {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			require-prior-idle-ms = <100>;
			tapping-term-ms = <250>;
			quick-tap-ms = <200>;
			hold-trigger-key-positions = <0 1 2 6 7 8 9 10 16 17 18 19 20 26 27>;
			hold-trigger-on-release;
			bindings = <&kp>, <&kp>;
		};
		ss: sticky_shift {
			compatible = "zmk,behavior-sticky-key";
			#binding-cells = <1>;
			bindings = <&kp>;
			release-after-ms = <2500>;
			quick-release;
			ignore-modifiers;
		};
		holdtap_qu: holdtap_qu {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&macro_qu>, <&kp>;
			tapping-term-ms = <200>;
		};
		holdtap_gu: holdtap_gu {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			bindings = <&macro_gu>, <&macro_gu_diaresis>;
			tapping-term-ms = <200>;
		};

// PAIRED SYMBOLS AND MACROS WITH SHIFTS
		parentesis: parent_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LPAR>, <&kp RPAR>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		braces: brace_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LBRC>, <&kp RBRC>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		brackets: bracket_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LBKT>, <&kp RBKT>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		angles: angle_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LT>, <&kp GT>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		quest: question_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp QUESTION>, <&kp RA(FSLH)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
	};
};

ZMK_MOD_MORPH(comma,    bindings = <&kp COMMA>,  <&excl_quest>; mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(slash,    bindings = <&kp FSLH>,   <&path_here>;  mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(tperiod,  bindings = <&kp PERIOD>, <&t_period>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(currency, bindings = <&kp DOLLAR>, <&kp RA(N5)>;  mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(excl,     bindings = <&kp EXCL>,   <&kp RA(N1)>;  mods = <(MOD_LSFT|MOD_RSFT)>;)

ZMK_MACRO(qu,         bindings = <&kp Q &kp U>;)
ZMK_MACRO(au,         bindings = <&kp A &kp U>;)
ZMK_MACRO(ua,         bindings = <&kp U &kp A>;)
ZMK_MACRO(gu,         bindings = <&kp G &kp U>;)
ZMK_MACRO(gu_d,       bindings = <&kp G &kp RA(U)>;)
ZMK_MACRO(t_period,   bindings = <&kp PERIOD &kp PERIOD &kp PERIOD>;)
ZMK_MACRO(path_here,  bindings = <&kp PERIOD &kp FSLH &kp STAR>;)
ZMK_MACRO(excl_quest, bindings = <&kp EXCLAMATION &kp QUESTION>;)

ZMK_MACRO_TWO_PARAM(lm,
	wait-ms = <0>;
	tap-ms = <0>;
	bindings
		= <&macro_param_1to1>
		, <&macro_press &mo MACRO_PLACEHOLDER>
		, <&macro_param_2to1>
		, <&macro_press &kp MACRO_PLACEHOLDER>
		, <&macro_pause_for_release>
		, <&macro_param_2to1>
		, <&macro_release &kp MACRO_PLACEHOLDER>
		, <&macro_param_1to1>
		, <&macro_release &mo MACRO_PLACEHOLDER>
		;
)

/*		0	1	2		 		3	4	5
	6	7	8	9	10		11	12	13	14	15
	16	17	18	19	20		21	22	23	24	25
				26	27		28	29	              */

// Alpha combos
ZMK_COMBO(z,            &kp Z,	7 17,	LAYERS,	TO_V)
ZMK_COMBO(x,            &kp X,	9 19,	LAYERS,	TO_V)
// ZMK_COMBO(qu,   &holdtap_qu Q,	8 18,	COMBO_LAYERS,   VERT_TIMEOUT)
ZMK_COMBO(qu,           &kp Q,	8 18,	LAYERS, TO_V)
// ZMK_COMBO(gu, &holdtap_gu G G,   2 9,	COMBO_LAYERS,	VERT_TIMEOUT)
ZMK_COMBO(au,       &macro_au, 12 22,	LAYERS,	TO_V)
ZMK_COMBO(ua,       &macro_ua,  3 12,	LAYERS,	TO_V)
// ZMK_COMBO(enie,     &kp RA(N), 7 19>,	COMBO_LAYERS,   HORZ_TIMEOUT, 50)
// Vertical combos
ZMK_COMBO(plus,      &kp PLUS, 11 21, LAYERS, TO_V)
ZMK_COMBO(grave,    &kp GRAVE, 10 20, LAYERS, TO_V)
ZMK_COMBO(and,       &kp AMPS,  5 14, LAYERS, TO_V)
ZMK_COMBO(or,        &kp PIPE,  0  7, LAYERS, TO_V)
ZMK_COMBO(asterisk,  &kp STAR,  4 13, LAYERS, TO_V)
ZMK_COMBO(backslash, &kp BSLH,  1  8, LAYERS, TO_V)
ZMK_COMBO(currency, &currency, 14 24, LAYERS, TO_V)
// Horizontal combos
ZMK_COMBO(hash,      &kp HASH, 17 18, LAYERS, TO_H, HORZ_IDLE)
ZMK_COMBO(at,          &kp AT, 23 24, LAYERS, TO_H, HORZ_IDLE)
ZMK_COMBO(semicolon, &kp SEMI, 18 19, LAYERS, TO_H, HORZ_IDLE)
ZMK_COMBO(colon,    &kp COLON, 22 23, LAYERS, TO_H, HORZ_IDLE)
ZMK_COMBO(equal,    &kp EQUAL,   1 2, LAYERS, TO_H,  DEF_IDLE)
ZMK_COMBO(tilde,    &kp TILDE,   3 4, LAYERS, TO_H,  DEF_IDLE)
ZMK_COMBO(caret,    &kp CARET,   4 5, LAYERS, TO_H,  DEF_IDLE)
ZMK_COMBO(prcnt,  &kp PERCENT,   0 1, LAYERS, TO_H,  DEF_IDLE)
ZMK_COMBO(bootl,  &bootloader,   0 5, LAYERS, TO_H,  DEF_IDLE)
// Horizontal combos on home row
ZMK_COMBO(cps_wrd, &caps_word,  8 13, LAYERS,   50, HOME_IDLE)
ZMK_COMBO(backspace, &kp BSPC, 13 14, LAYERS,  150, HOME_IDLE)
ZMK_COMBO(delete,     &kp DEL, 14 15, LAYERS,  120, HOME_IDLE)
ZMK_COMBO(enter,      &kp RET,   7 8, LAYERS,   70, HOME_IDLE)
ZMK_COMBO(escape,     &kp ESC,   7 9, LAYERS,   50, HOME_IDLE)
ZMK_COMBO(uscore,   &kp UNDER, 12 14, LAYERS,  100, HOME_IDLE)
ZMK_COMBO(tab,        &kp TAB, 12 13, LAYERS,   60, HOME_IDLE)
// Diagonal combos
ZMK_COMBO(quote,      &kp SQT,   2 8, LAYERS, TO_D, DEF_IDLE)
ZMK_COMBO(dquote,     &kp DQT,  3 13, LAYERS, TO_D, DEF_IDLE)
ZMK_COMBO(parent, &parentesis, 12 23, LAYERS, TO_D, DEF_IDLE)
ZMK_COMBO(braces,     &braces,  9 18, LAYERS, TO_D, DEF_IDLE)
ZMK_COMBO(brackets, &brackets, 14 23, LAYERS, TO_D, DEF_IDLE)
ZMK_COMBO(angles,     &angles,  7 18, LAYERS, TO_D, DEF_IDLE)
ZMK_COMBO(excl,         &excl,  5 13, LAYERS, TO_D, DEF_IDLE)
ZMK_COMBO(quest,       &quest,  0  8, LAYERS, TO_D, DEF_IDLE)

ZMK_LAYER(base,
		&kp B		&kp H			&kp G							&comma		&slash			&kp J
&kp C	&lhm LALT S	&lhm LCTRL N	&lt 1 T		&kp K	&tperiod	&lt 2 A		&rhm RCTRL E	&rhm LALT I	&kp M
&kp P	&kp F		&kp L			&lm 3 D		&kp V	&kp MINUS	&kp U		&kp O			&kp Y		&kp W
					&ss LSHFT		&lt RA(APOS) R					&mt RWIN SPACE	&ss RSHFT
)

ZMK_LAYER(navigation,
			&none		&none		&none								&kp LC(V)	&kp LC(C)	&kp LC(X)
&kp LALT	&kp LCTRL	&kp LSHFT	&none		&none	&kp LC(PLUS)	&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT
&none		&none		&none		&none		&none	&kp LC(MINUS)	&kp HOME	&kp PG_DN	&kp PG_UP	&kp END
						&kp LC(Z)	&kp LC(Y)					 		&kp SPACE	&kp RSHFT
)

ZMK_LAYER(numbers,
		&kp FSLH	&kp STAR	&kp PLUS					&none		&none		&none
&kp N4	&kp N3		&kp N2		&kp N1		&none	&none	&none		&kp PERIOD	&kp COMMA	&kp MINUS
&kp N8	&kp N7		&kp N6		&kp N5		&none	&none	&none		&none		&none		&none
					&kp N9  	&kp N0						&kp SPACE	&none
)

ZMK_LAYER(mouse,
		&none		&none		&none					&none		&kp DOWN	&kp UP
&none	&none		&none		&none	&none	&none	&kp A		&kp E		&kp I	&kp M
&none	&kp LALT	&kp LCTRL	&none	&none	&none	&mkp MB4	&kp O		&kp Y	&mkp MB5
					&none		&mkp RCLK				&mkp LCLK	&mkp MCLK
)
