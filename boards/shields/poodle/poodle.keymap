// TODO: Implement caps-word behavior that shifts the minus key 
// TODO: Use ACS for hrm on all layers
// TODO: Format combos by side
// todo implement u diaresis
// TODO: sequetial combos for braces and qu


#define ZMK_MOUSE_DEFAULT_SCRL_VAL 30

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include "zmk-helpers/helper.h"
#include "keylabels.h"

// LAYERS
#define BSE 0
#define NAV 1
#define NUM 2
#define MOU 3

// KEY GROUPS 
#define LEFT_HAND_KEYS LT3 LT2 LT1 LM4 LM3 LM2 LM1 LM0 LB4 LB3 LB2 LB1 LB0
#define RIGHT_HAND_KEYS RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMB_KEYS LH1 LH0 RH0 RH1

// COMMON SHORTCUTS
#define CUT      &kp LC(X)
#define PASTE    &kp LC(V)
#define COPY     &kp LC(C)
#define ZOOM_IN  &kp LC(PLUS)
#define ZOOM_OUT &kp LC(MINUS)
#define UNDO     &kp LC(Z)
#define REDO     &kp LC(Y)

// MOUSE OPERATIONS
#define WHEEL_LEFT  &msc SCRL_LEFT
#define WHEEL_UP    &msc SCRL_UP
#define WHEEL_DOWN  &msc SCRL_DOWN
#define WHEEL_RIGHT &msc SCRL_RIGHT
#define CURSOR_LEFT  &mmv MOVE_LEFT
#define CURSOR_UP    &mmv MOVE_UP
#define CURSOR_DOWN  &mmv MOVE_DOWN
#define CURSOR_RIGHT &mmv MOVE_RIGHT
#define FORWARD      &mkp MB5
#define BACK         &mkp MB4

// MACROS
ZMK_MACRO(add,			bindings = <&kp SPACE &kp PLUS  &kp SPACE>;)
ZMK_MACRO(sub,			bindings = <&kp SPACE &kp MINUS &kp SPACE>;)
ZMK_MACRO(div,			bindings = <&kp SPACE &kp FSLH  &kp SPACE>;)
ZMK_MACRO(mul,			bindings = <&kp SPACE &kp STAR  &kp SPACE>;)

ZMK_MACRO(qu,
	wait-ms = <0>;
	tap-ms = <0>;
	bindings = <&kp Q &kp U>;
)

// BEHAVIOR CONFIGURATION
&sk {
    release-after-ms = <2000>;
    quick-release; 
    ignore-modifiers;
};

&caps_word {
    continue-list = <UNDER MINUS BSPC>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
};

// HOLD TAPS
ZMK_HOLD_TAP(qu_q,
	flavor = "tap-preferred";
	tapping-term-ms = <250>;
	bindings = <&kp>, <&qu>;
)

ZMK_HOLD_TAP(hml,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(hmr,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(spc,
	flavor = "hold-preferred";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(lsf,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	bindings = <&kp>, <&sk>;
)

ZMK_HOLD_TAP(ret_esc,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <200>;
	quick-tap-ms = <200>;
	bindings = <&kp>, <&kp>;
)

// Keys with special shifted versions--------------------------------------------------------------
ZMK_MOD_MORPH(currency,   bindings = <&kp DLLR>,  <&kp RA(N5)>;   mods = <(MOD_LSFT|MOD_RSFT)>;)

ZMK_MOD_MORPH(minu_plus,  bindings = <&kp MINUS>, <&kp PLUS>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(fslh_star,  bindings = <&kp FSLH>,  <&kp STAR>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(dot_colon,  bindings = <&kp DOT>,  <&kp COLON>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(comma_semi, bindings = <&kp COMMA>, <&kp SEMI>;     mods = <(MOD_LSFT|MOD_RSFT)>;)

ZMK_MOD_MORPH(sft_capsw,
    bindings = <&sk RSFT>, <&caps_word>;
    mods = <(MOD_RSFT)>;
)

// ALPHA COMBOS
ZMK_COMBO(z,              &kp Z, LT1 LT3, BSE    , 150,   0) // bg z
ZMK_COMBO(x,              &kp X, LT3 LT2, BSE    , 150,   0) // bh x
ZMK_COMBO(enie,       &kp RA(N), LB1 LB3, BSE    , 150,   0) // fd Ã±
ZMK_COMBO(qu,         &qu_q Q Q, LM2 LT1, BSE    , 150,   0) // nb qu|q
// HOME ROW COMBOS
ZMK_COMBO(ret_esc, &ret_esc ESC ENTER, LM2 LM3, BSE NAV,  70,  75) // ei ret
ZMK_COMBO(tab,          &kp TAB, RM1 RM2, BSE    ,  60,  75) // ae tab
ZMK_COMBO(sqt,          &kp SQT, LM1 LM3, BSE    , 100,  75) // ai _   
ZMK_COMBO(dqt,          &kp DQT, RM1 RM3, BSE    ,  50,  75) // st esc
ZMK_COMBO(backspace,   &kp BSPC, RM2 RM3, BSE NAV, 150,  75) // ei bsp
ZMK_COMBO(delete,       &kp DEL, RM3 RM4, BSE NAV, 140, 100) // im del
// Combos: horizontal
ZMK_COMBO(bootl,    &bootloader, LT3 RT3, BSE    ,  50, 150) // bj enter flash mode
ZMK_COMBO(excl,        &kp EXCL, RT2 RT3, BSE    ,  50, 150) // j/ !
ZMK_COMBO(qmark,      &kp QMARK, RT1 RT2, BSE    ,  50, 150) // ,/ ?

// VERTICAL COMBOS 
ZMK_COMBO(pipe,        &kp PIPE, LT1 LM1,     BSE, 100,   0) // c p
ZMK_COMBO(tilde,      &kp TILDE, LT2 LM2,     BSE, 100,   0) // c p
ZMK_COMBO(pcnt,       &kp PRCNT, LT3 LM3,     BSE, 100,   0) // c p
ZMK_COMBO(hash,        &kp HASH, LM1 LB1,     BSE, 100,   0) // c p
ZMK_COMBO(at,            &kp AT, LM2 LB2,     BSE, 100,   0) // c p
ZMK_COMBO(grave,   &kp GRAVE, LM3 LB3,     BSE, 100,   0) // c p

ZMK_COMBO(amps,       &kp AMPS, RT1 RM1,     BSE, 100,   0) // c p
ZMK_COMBO(equal,      &kp EQUAL, RT2 RM2,     BSE, 100,   0) // c 
ZMK_COMBO(caret,      &kp CARET, RT3 RM3,     BSE, 100,   0) // c p
ZMK_COMBO(bslh,        &kp BSLH, RM1 RB1,     BSE, 100,   0) // c p
ZMK_COMBO(currency,   &currency, RM2 RB2,     BSE, 100,   0) // c 
ZMK_COMBO(under,      &kp UNDER, RM3 RB3,     BSE, 100,   0) // c 


/* Sequential combos implemented in Kanata:
ao ( oa )
oi [ io ]
nt { tn }
sn < ns >
*/


ZMK_LAYER(base,
				&kp B			&kp H			&kp G										&comma_semi			&fslh_star		&kp J
&kp C			&hml LALT S		&hml LCTRL N	&lt NAV T		&kp K		&dot_colon		&lt NUM A		&hmr RCTRL E	&hmr LALT I		&kp M
&kp P			&kp F			&kp L			&kp D			&kp V		&minu_plus		&kp U			&kp O			&kp Y			&kp W
								&lsf RA(SQT) LSHFT	&lt MOU R								&spc RWIN SPACE	&sft_capsw
)

ZMK_LAYER(navigation,
			&none		&none		&none							PASTE		COPY		CUT
&kp LALT	&kp LCTRL	&kp LSHFT	&none		&none	ZOOM_IN		&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT
&none		&none		&none		&none		&none	ZOOM_OUT	&kp HOME	&kp PG_DN	&kp PG_UP	&kp END
						REDO		UNDO							&kp SPACE	&kp RSHFT
)

ZMK_LAYER(numbers,
			&none		&div		&mul							&none		&none		&none
&kp N3		&kp N2		&kp N1		&kp N0		&add	&none		&none		&kp DOT		&kp COMMA	&kp MINUS
&kp N7		&kp N6		&kp N5		&kp N4		&sub	&none		&none		&none		&none		&none
						&none		&kp N8							&kp N9		&kp SPACE
)

ZMK_LAYER(mouse,
			&none		&none		&none							&none		&kp DOWN	&kp UP
&kp LALT	&kp LCTRL	&kp LSHFT	&mkp MCLK	&none	&none		CURSOR_LEFT	CURSOR_DOWN	CURSOR_UP	CURSOR_RIGHT
&none		BACK		FORWARD		&none		&none	&none		WHEEL_LEFT	WHEEL_DOWN	WHEEL_UP	 WHEEL_RIGHT
						&none		&none							&mkp LCLK   &mkp RCLK
)
