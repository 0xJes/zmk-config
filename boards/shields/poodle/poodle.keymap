/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define VERT_TIMEOUT 120
#define HORZ_TIMEOUT 70
#define DIAG_TIMEOUT 150
#define HOME_TIMEOUT 50

#define VERT_IDLE 0
#define HORZ_IDLE 200
#define ALPHA_IDLE 0
#define DEF_IDLE 100
#define HOME_IDLE 75

/ {
// MACROS
    macros {
        macro_q: macro_q {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
		    wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_press &kp Q>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp U>
                ;
        };
    };
	behaviors {
		hm: home_row_mod {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "balanced";
			require-prior-idle-ms = <80>;
			tapping-term-ms = <250>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
		tl: temp_layer {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
		ss: sticky_shift {
			compatible = "zmk,behavior-sticky-key";
			#binding-cells = <1>;
	   		bindings = <&kp>;
			release-after-ms = <2500>;
			quick-release;
			ignore-modifiers;
		};
		qu: qu {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>,<&macro_q>;
        };
// PAIRED SYMBOLS
		parent_pair: parent_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LPAR>, <&kp RPAR>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		brace_pair: brace_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LBRC>, <&kp RBRC>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		bracket_pair: bracket_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LBKT>, <&kp RBKT>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		angle_pair: angle_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LT>, <&kp GT>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		question_pair: question_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp QUESTION>, <&kp RA(FSLH)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		exclamation_pair: exclamation_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp EXCLAMATION>, <&kp RA(N1)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		currency_pair: currency_pair {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp DOLLAR>, <&kp RA(N5)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		tperiod: tperiod {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp PERIOD>, <&kp PERIOD &kp PERIOD &kp PERIOD>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
	};
	combos {
		compatible = "zmk,combos";
// ALPHA COMBOS
		combo_gu {
			bindings = <&kp G &kp RA(U)>;
			key-positions = <0 2>;
			require-prior-idle-ms = <ALPHA_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_qu {
			bindings = <&qu Q>;
			key-positions = <8 18>;
			require-prior-idle-ms = <ALPHA_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_z {
			bindings = <&kp Z>;
			key-positions = <7 17>;
			require-prior-idle-ms = <ALPHA_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_x {
			bindings = <&kp X>;
			key-positions = <9 19>;
			require-prior-idle-ms = <ALPHA_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_enie {
			bindings = <&kp RA(N)>;
			key-positions = <17 19>;
			require-prior-idle-ms = <ALPHA_IDLE>;
			timeout-ms = <HORZ_TIMEOUT>;
		};
		combo_au {
			bindings = <&kp A &kp U>;
			key-positions = <12 22>;
			require-prior-idle-ms = <ALPHA_IDLE>;
			timeout-ms = <HORZ_TIMEOUT>;
		};

// HORIZONTAL COMBOS ON HOME ROW
		combo_bsp {
			bindings = <&kp BACKSPACE>;
			key-positions = <13 14>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <150>;
		};
		combo_del {
			bindings = <&kp DELETE>;
			key-positions = <14 15>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <120>;
		};
		combo_ret {
			bindings = <&kp RET>;
			key-positions = <7 8>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <70>;
		};
		combo_esc {
			bindings = <&kp ESCAPE>;
			key-positions = <7 9>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <50>;
		};
		combo_underscore {
			bindings = <&kp UNDER>;
			key-positions = <12 14>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <100>;
		};
		combo_tab {
			bindings = <&kp TAB>;
			key-positions = <12 13>;
			require-prior-idle-ms = <HOME_IDLE>;
			timeout-ms = <60>;
		};
// HORIZONTAL COMBOS
		combo_hash {
			bindings = <&kp HASH>;
			key-positions = <18 19>;
			require-prior-idle-ms = <HORZ_IDLE>;
			timeout-ms = <HORZ_TIMEOUT>;
		};
		combo_caps_word {
			bindings = <&caps_word>;
			key-positions = <26 27>;
			require-prior-idle-ms = <100>;
			timeout-ms = <150>;
		};
		combo_equal {
			bindings = <&kp EQUAL>;
			key-positions = <1 2>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <HORZ_TIMEOUT>;
		};
		combo_tilde {
			bindings = <&kp TILDE>;
			key-positions = <3 4>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <HORZ_TIMEOUT>;
		};
		combo_caret {
			bindings = <&kp CARET>;
			key-positions = <4 5>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <HORZ_TIMEOUT>;
		};
		combo_percent {
			bindings = <&kp PERCENT>;
			key-positions = <0 1>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <HORZ_TIMEOUT>;
		};
// VERTICAL COMBOS
		combo_at {
			bindings = <&kp AT>;
			key-positions = <13 23>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_currency {
			bindings = <&currency_pair>;
			key-positions = <14 24>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_plus {
			bindings = <&kp PLUS>;
			key-positions = <11 21>;
			require-prior-idle-ms = <VERT_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_grv {
			bindings = <&kp GRAVE>;
			key-positions = <10 20>;
			require-prior-idle-ms = <VERT_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_and {
			bindings = <&kp AMPERSAND>;
			key-positions = <5 14>;
			require-prior-idle-ms = <VERT_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_or {
			bindings = <&kp PIPE>;
			key-positions = <0 7>;
			require-prior-idle-ms = <VERT_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};

		combo_asterisk {
			bindings = <&kp STAR>;
			key-positions = <4 13>;
			require-prior-idle-ms = <VERT_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_bslash {
			bindings = <&kp BSLH>;
			key-positions = <1 8>;
			require-prior-idle-ms = <VERT_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_semi {
			bindings = <&kp SEMI>;
			key-positions = <2 9>;
			require-prior-idle-ms = <VERT_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_colon {
			bindings = <&kp COLON>;
			key-positions = <3 12>;
			require-prior-idle-ms = <VERT_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
// DIAGONAL COMBOS
		combo_quote {
			bindings = <&kp SQT>;
			key-positions = <2 8>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <DIAG_TIMEOUT>;
		};
		combo_dbquote {
			bindings = <&kp DQT>;
			key-positions = <3 13>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <DIAG_TIMEOUT>;
		};
		combo_parentesis {
			bindings = <&parent_pair>;
			key-positions = <12 23>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <DIAG_TIMEOUT>;
		};
		combo_braces {
			bindings = <&brace_pair>;
			key-positions = <9 18>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <DIAG_TIMEOUT>;
		};
		combo_brackets {
			bindings = <&bracket_pair>;
			key-positions = <7 18>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <DIAG_TIMEOUT>;
		};
		combo_angles {
			bindings = <&angle_pair>;
			key-positions = <8 17>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <DIAG_TIMEOUT>;
		};
		combo_excl {
			bindings = <&exclamation_pair>;
			key-positions = <5 13>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <DIAG_TIMEOUT>;
		};
		combo_quest {
			bindings = <&question_pair>;
			key-positions = <0 8>;
			require-prior-idle-ms = <DEF_IDLE>;
			timeout-ms = <DIAG_TIMEOUT>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		base {
			bindings = <
		&kp B		&kp H		&kp G						&kp COMMA	&kp FSLH	&kp J
&kp C	&hm LALT S	&hm LCTRL N	&tl 1 T	&kp K	&tperiod	&tl 2 A		&hm RCTRL E	&hm LALT I	&kp M
&kp P	&kp F		&kp L		&kp D	&kp V	&kp MINUS	&kp U		&kp O		&kp Y		&kp W
								&ss LSHFT	&tl RA(APOS) R	&tl RWIN SPACE	&ss RSHFT
			>;
		};
		nav {
			bindings = <
		&none		&none		&none								&kp LC(C)	&kp LC(V)	&kp LC(X)
&none	&kp LALT	&kp LCTRL	&none		&none	&kp LC(PLUS)	&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT
&none	&none		&none		&none		&none	&kp LC(MINUS)	&kp HOME	&kp PG_DN	&kp PG_UP	&kp END
								&kp LSHFT	&none	&kp LC(Z)		&kp LC(Y)
			>;
		};
		num {
			bindings = <
		&kp FSLH	&kp STAR	&kp PLUS					&none	&none		&none
&kp N3	&kp N2		&kp N1		&kp N0		&none	&none	&none	&kp PERIOD	&kp COMMA	&none
&kp N7	&kp N6		&kp N5		&kp N4		&none	&none	&none	&none		&none		&none
								&kp MINUS	&kp N8	&kp N9	&kp SPACE
			>;
		};
	};
};
