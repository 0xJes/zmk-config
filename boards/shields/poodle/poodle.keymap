/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define VERT_TIMEOUT 150
#define HORZ_TIMEOUT 100
#define DEFAULT_IDLE 100
#define VERT_IDLE 0

/ {
	combos {
		compatible = "zmk,combos";

		/*combo_gu {
			bindings = <&kp TAB>;
			key-positions = <12 13>;
			require-prior-idle-ms = <100>;
			timeout-ms = <50>;
		};*/

				/*combo_qu {
			bindings = <&kp TAB>;
			key-positions = <12 13>;
			require-prior-idle-ms = <100>;
			timeout-ms = <50>;
		};*/

		combo_z {
			bindings = <&kp Z>;
			key-positions = <7 17>;
			require-prior-idle-ms = <0>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_x {
			bindings = <&kp X>;
			key-positions = <9 19>;
			require-prior-idle-ms = <0>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_enie {
			bindings = <&kp RA(N)>;
			key-positions = <17 19>;
			require-prior-idle-ms = <50>;
			timeout-ms = <200>;
		};
		combo_bsp {
			bindings = <&kp BACKSPACE>;
			key-positions = <13 14>;
			require-prior-idle-ms = <50>;
			timeout-ms = <150>;
		};
		combo_del {
			bindings = <&kp DELETE>;
			key-positions = <14 15>;
			require-prior-idle-ms = <50>;
			timeout-ms = <120>;
		};
		combo_ret {
			bindings = <&kp RET>;
			key-positions = <7 8>;
			require-prior-idle-ms = <50>;
			timeout-ms = <80>;
		};
		combo_esc {
			bindings = <&kp ESCAPE>;
			key-positions = <7 8>;
			require-prior-idle-ms = <50>;
			timeout-ms = <50>;
		};
		combo_tab {
			bindings = <&kp TAB>;
			key-positions = <12 13>;
			require-prior-idle-ms = <100>;
			timeout-ms = <50>;
		};
		combo_caps_word {
			bindings = <&caps_word>;
			key-positions = <26 27>;
			require-prior-idle-ms = <50>;
			timeout-ms = <150>;
		};
		combo_at {
			bindings = <&kp AT>;
			key-positions = <13 23>;
			require-prior-idle-ms = <50>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_plus {
			bindings = <&kp PLUS>;
			key-positions = <11 21>;
			require-prior-idle-ms = <50>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_equal {
			bindings = <&kp EQUAL>;
			key-positions = <1 2>;
			require-prior-idle-ms = <DEFAULT_IDLE>;
			timeout-ms = <VERT_TIMEOUT>;
		};
		combo_tilde {
			bindings = <&kp TILDE>;
			key-positions = <3 4>;
			require-prior-idle-ms = <DEFAULT_IDLE>;
			timeout-ms = <HORZ_TIMEOUT>;
		};
		combo_caret {
			bindings = <&kp CARET>;
			key-positions = <4 5>;
			require-prior-idle-ms = <DEFAULT_IDLE>;
			timeout-ms = <HORZ_TIMEOUT>;
		};
		combo_percent {
			bindings = <&kp PERCENT>;
			key-positions = <0 1>;
			require-prior-idle-ms = <DEFAULT_IDLE>;
			timeout-ms = <HORZ_TIMEOUT>;
		};
		grv {
			bindings = <&kp GRAVE>;
			key-positions = <10 20>;
		};


	};

	keymap {
		compatible = "zmk,keymap";

		base {
			bindings = <
		&kp B		&kp H		&kp G								&kp COMMA	&kp FSLH	&kp J
&kp C	&mt LALT S	&mt LCTRL N	&lt 1 T		&kp K	&kp DOT			&lt 2 A		&mt RCTRL E	&mt LALT I	&kp M
&kp P	&kp F		&kp L		&kp D		&kp V	&kp MINUS		&kp U		&kp O		&kp Y		&kp W
								&sk LSHFT	&kp R	&mt RWIN SPACE	&sk RSHFT
			>;
		};
		nav {
			bindings = <
		&none		&none		&none								&kp LC(C)	&kp LC(V)	&kp LC(X)
&none	&kp LALT	&kp LCTRL	&none		&none	&kp LC(PLUS)	&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT
&none	&none		&none		&none		&none	&kp LC(MINUS)	&kp HOME	&kp PG_DW	&kp PG_UP	&kp END
								&kp LSHFT	&none	&kp LC(Z)		&kp LC(Y)
			>;
		};
		num {
			bindings = <
		&none	&none	&none						&none	&none		&none
&kp N3	&kp N2	&kp N1	&kp N0		&none	&none	&none	&kp PERIOD	&kp COMMA	&none
&kp N7	&kp N6	&kp N5	&kp N4		&none	&none	&none	&none		&none		&none
						&kp MINUS	&kp N8	&kp N9	&kp SPACE
			>;
		};
		mouse {
			bindings = <
		&none	&none	&none						&none		&none	&none
&none	&none	&none	&none	&none	&none		&none		&none	&none	&mkp MB5
&none	&none	&none	&none	&none	&none		&mkp MB4	&none	&none	&mkp MB5
						&none	&none	&mkp MB1	&mkp MB2
			>;
		};
	};
};
