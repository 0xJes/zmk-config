#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <zmk-helpers/helper.h>
#include "keylabels.h"

#define LEFT_HAND_KEYS  LT3 LT2 LT1 LM4 LM3 LM2 LM1 LM0 LB4 LB3 LB2 LB1 LB0
#define RIGHT_HAND_KEYS RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMB_KEYS      LH0 RH0

#define BSE 0
#define AP2 1
#define NAV 2
#define NUM 3
#define GME 4

// behavior configuration

&caps_word { // enables kebab and snake case
	continue-list = <UNDER MINUS BSPC>;
};

&lt {
	flavor = "balanced";
	tapping-term-ms = <250>;
	quick-tap-ms = <150>;
	require-prior-idle-ms = <100>;
};

&mt {
	flavor = "balanced";
	tapping-term-ms = <300>;
	quick-tap-ms = <180>;
	bindings = <&kp>, <&kp>;
};


ZMK_HOLD_TAP(lm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <350>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(rm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <350>;
	quick-tap-ms = <200>; 
	hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_MACRO(M_qu, bindings = <&kp Q &kp U    > ;)

//        NAME        OUTPUT          COMBOS    LAYERS TIME IDLE
ZMK_COMBO(z,        &kp Z,        RT1 RT3,         BSE,  45,   0) // alpha combos
ZMK_COMBO(v,        &kp V,        RT2 RT3,         BSE,  45,   0)
ZMK_COMBO(qu,       &M_qu,        RB1 RB2,         BSE,  50,   0)
ZMK_COMBO(q,        &kp Q,        RB3 RB1,         BSE,  50,   0)
ZMK_COMBO(j,        &kp J,        RB2 RB3,         BSE,  50,   0)

ZMK_COMBO(tab,      &kp TAB,      LM1 LM2,         BSE,  35, 180) // control chars
ZMK_COMBO(under,    &kp UNDER,    LM1 LM3,         BSE,  45, 100)
ZMK_COMBO(bspc,     &kp BSPC,     LM2 LM3, NUM BSE NAV,  65, 100)
ZMK_COMBO(delete,   &kp DEL,      LM3 LM4, NUM BSE NAV, 140, 350)
ZMK_COMBO(ret,      &kp RET,      RM2 RM3, NUM BSE NAV,  55, 100)
ZMK_COMBO(esc,      &kp ESC,      RM1 RM3, NUM BSE NAV,  55, 180)

ZMK_COMBO(lcapsw,   &caps_word,   LM1 LM4,         BSE,  60, 250) // Layers
ZMK_COMBO(rcapsw,   &caps_word,   RM1 RM4,         BSE,  60, 250)
ZMK_COMBO(gaming,   &tog GME,     LT1 RT1,     GME BSE,  50, 250)

ZMK_COMBO(dolar,    &kp DLLR,     LT1 LT3,         BSE,  50,   0) // symbols
ZMK_COMBO(at,       &kp AT,       RM0 RT1,         BSE,  80,   0)
ZMK_COMBO(hash,     &kp HASH,     LB1 LB3,	       BSE,  90, 150)
ZMK_COMBO(colon,    &kp COLON,    LM3 LT1,         BSE,  50, 250)
ZMK_COMBO(semi,     &kp SEMI,     RM3 RT1,         BSE, 100, 180)
ZMK_COMBO(star,     &kp STAR,     RM0 RM1,         BSE, 150, 250)
ZMK_COMBO(blsh,     &kp BSLH,     LM0 LM1,         BSE, 150, 250)
ZMK_COMBO(caret,    &kp CARET,    LB0 LM1,         BSE, 150, 250)
ZMK_COMBO(percent,  &kp PRCNT,    RB1 RB3,         BSE,  90, 250)
ZMK_COMBO(dqt,      &kp DQT,      LB1 LB2,         BSE,  70,   0)
ZMK_COMBO(grave,    &kp GRAVE,    LT1 LT2,         BSE,  50, 250)
ZMK_COMBO(plus,     &kp PLUS,     RB0 RM1,         BSE,  80, 250)
ZMK_COMBO(equal,    &kp EQUAL,    LB2 LB3,         BSE,  80, 250)
ZMK_COMBO(tilde,    &kp TILDE,    LB0 LB1,         BSE,  80, 250)

ZMK_COMBO(amps,     &kp AMPS,     RM0 RB0,         BSE,  50, 200)
ZMK_COMBO(pipe,     &kp PIPE,     LM0 LB0,         BSE,  50,   0)
ZMK_COMBO(lpar,     &kp LPAR,     LM1 LB1,         BSE,  50, 200)
ZMK_COMBO(rpar,     &kp RPAR,     RM1 RB1,         BSE,  50,   0)
ZMK_COMBO(lbkt,     &kp LBKT,     LT1 LM1,         BSE,  50, 200)
ZMK_COMBO(rbkt,     &kp RBKT,     RT1 RM1,         BSE,  50,   0)
ZMK_COMBO(lbrc,     &kp LBRC,     LM2 LB2,         BSE,  50, 200)
ZMK_COMBO(rbrc,     &kp RBRC,     RM2 RB2,         BSE,  50,   0)
ZMK_COMBO(lt,       &kp LT,       LT2 LM2,         BSE,  50, 200)
ZMK_COMBO(gt,       &kp GT,       RT2 RM2,         BSE,  50,   0)
ZMK_COMBO(lexcl,    &kp RA(N1),   LT3 LM3,         BSE,  50, 200)
ZMK_COMBO(excl,     &kp EXCL,     RT3 RM3,         BSE,  50,   0)
ZMK_COMBO(Lqmark,   &kp RA(FSLH), LM3 LB3,         BSE,  50, 200)
ZMK_COMBO(Rqmark,   &kp QMARK,    RM3 RB3,         BSE,  50,   0)

ZMK_LAYER(alpha,
				&kp Y			&kp O			&kp U										&kp L	    	&kp D           &kp F
&lm LALT C		&lm LCTRL I		&lm LGUI E		&lm LSHFT A		&kp COMMA	&kp K			&rm RSHFT H		&rm RGUI T		&rm LCTRL N		&rm RALT S
&kp P			&kp MINUS		&kp FSLH		&kp SQT			&kp DOT 	&kp X   		&kp M			&kp G			&kp W			&kp B
								&lt NAV SPACE  	&sl AP2										&sl AP2			&lt NUM R
)

ZMK_LAYER(alpha2,
				&none			&kp RA(DOT)		&kp RA(J)									&kp RA(U)		&none			&none
&kp RA(C)		&kp RA(B)		&kp RA(G) 		&kp RA(X)		&none		&none			&none   		&kp RA(N)		&none   		&none
&none			&none			&none			&none			&none		&none			&kp RA(SEMI)	&none   		&none			&none
								&none			&none										&none			&none
)

ZMK_LAYER(navigation,
				&none			&none			&none										&none			&none			&none
&none			&kp LALT		&kp LCTRL		&kp LSHIFT		&none		&kp LC(PLUS)	&kp LEFT		&kp DOWN		&kp UP			&kp RIGHT
&none			&none			&none			&none			&none		&kp LC(MINUS)	&kp HOME		&kp PG_DN		&kp PG_UP		&kp END
								&none			&none										&none			&none
)

ZMK_LAYER(numbers,
				&kp RA(N3)		&kp RA(N2)		&kp RA(SEMI)								&kp RA(N5)		&kp RA(N4)		&kp RA(LS(N5))
&kp N6			&kp N4			&kp N2			&kp N0			&none		&none			&kp N1			&kp N3			&kp N5			&kp N7
&none			&none			&none			&kp N8			&none		&none			&kp N9			&none			&none			&none
								&none			&none										&none	        &none
)


ZMK_LAYER(gaming, 
				&kp Q			&kp UP			&kp E  										&kp COMMA		&kp FSLH		&kp J
&kp TAB			&kp LEFT		&kp DOWN		&kp RIGHT		&kp ESC		&kp BSPC		&kp A			&kp E			&kp I			&kp M
&kp LSHFT		&kp X			&kp C			&kp V			&kp TAB		&kp RET			&kp U			&kp O			&kp Y			&kp RSHFT
								&kp X			&kp R										&kp SPACE		&kp Z
)


