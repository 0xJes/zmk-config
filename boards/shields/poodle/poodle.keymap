#define  HOST_OS 1 
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <zmk-helpers/helper.h>
#include "mouse.dtsi"
#include "box-drawing.dtsi"
#include "keylabels.h"

// layers
#define BSE 0
#define ACC 1
#define NAV 2
#define NUM 3
#define MOU 4
#define BOX 5
// KEY GROUPS 
#define LEFT_HAND_KEYS LT3 LT2 LT1 LM4 LM3 LM2 LM1 LM0 LB4 LB3 LB2 LB1 LB0
#define RIGHT_HAND_KEYS RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMB_KEYS LH1 LH0 RH0 RH1

// MACROS
ZMK_MACRO(add, bindings = <&kp SPACE &kp PLUS  &kp SPACE>;)
ZMK_MACRO(sub, bindings = <&kp SPACE &kp MINUS &kp SPACE>;)
ZMK_MACRO(div, bindings = <&kp SPACE &kp FSLH  &kp SPACE>;)
ZMK_MACRO(mul, bindings = <&kp SPACE &kp STAR  &kp SPACE>;)
ZMK_MACRO(gu_dr, bindings = <&kp G &kp RA(U)>;)
ZMK_MACRO(qu, bindings = <&kp Q &kp U>;)

// BEHAVIOR CONFIGURATION
&sk {
    release-after-ms = <2000>;
    quick-release; 
    ignore-modifiers;
};

&caps_word {
    continue-list = <UNDER MINUS BSPC>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <300>;
    quick-tap-ms = <150>;
};

&mt {
	flavor = "balanced";
	tapping-term-ms = <150>;
	quick-tap-ms = <180>;
	bindings = <&kp>, <&kp>;
};

// HOLD TAPS
ZMK_HOLD_TAP(lm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <350>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(rm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <350>;
	quick-tap-ms = <200>; 
	hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(qu_q,
	flavor = "tap-preferred";
	tapping-term-ms = <190>;
	bindings = <&kp>, <&qu>;
)

ZMK_HOLD_TAP(cl, // hold-tap used for sequential combos 
	flavor = "hold-preferred";
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	bindings = <&mo>, <&kp>;
)

ZMK_HOLD_TAP(mo_sk,
	flavor = "hold-preferred";
	tapping-term-ms = <150>;
	bindings = <&mo>, <&sk>;
)

// keys with different shift behavior
ZMK_MOD_MORPH(minu_plus,  bindings = <&kp MINUS>, <&kp PLUS>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(fslh_star,  bindings = <&kp FSLH>,  <&kp STAR>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(dot_colon,  bindings = <&kp DOT>,   <&kp COLON>;  mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(comma_semi, bindings = <&kp COMMA>, <&kp SEMI>;   mods = <(MOD_LSFT|MOD_RSFT)>;)

// horizontal combos
ZMK_COMBO(z,          &kp Z,       LT1 LT3,     BSE, 150,   0) 
ZMK_COMBO(x,          &kp X,       LT3 LT2,     BSE, 150,   0)
ZMK_COMBO(return,     &kp RET,     LM2 LM3, BSE NAV,  70,  75) 
ZMK_COMBO(escape,     &kp ESC,     LM1 LM3,     BSE,  80,  75)
ZMK_COMBO(tab,        &kp TAB,     RM1 RM2,     BSE,  60,  75)
ZMK_COMBO(underscore, &kp UNDER,   RM1 RM3,     BSE,  50,  75)
ZMK_COMBO(backspace,  &kp BSPC,    RM2 RM3, BSE NAV, 150,  75)
ZMK_COMBO(delete,     &kp DEL,     RM3 RM4, BSE NAV, 180, 120)
ZMK_COMBO(squote,     &kp SQT,     RT1 RT2,     BSE, 140,   0)
ZMK_COMBO(dquote,     &kp DQT,     RT2 RT3,     BSE, 140,   0)
ZMK_COMBO(cpslock,    &kp CAPS,    RB1 RB3,     BSE,  70, 150)
ZMK_COMBO(cpsword,    &caps_word,  RT1 RT3,     BSE,  70, 150) 
ZMK_COMBO(box_drwng,  &tog BOX,    LT2 RT2,     BSE,  50, 150)
ZMK_COMBO(bootldr,    &bootloader, LT3 RT3,     BSE,  50, 200)
 
// vertical combos
ZMK_COMBO(degree,     &kp DEGREE,  LM0 LB0,     BSE, 100, 150) 
ZMK_COMBO(grave,	  &kp GRAVE,   RM0 RB0,     BSE, 100, 150)

ZMK_COMBO(percent,    &kp PRCNT,   LT1 LM1,     BSE, 100, 150) 
ZMK_COMBO(tilde,      &kp TILDE,   LT2 LM2,     BSE, 100, 150)
ZMK_COMBO(pipe,       &kp PIPE,    LT3 LM3,     BSE, 100, 150)

ZMK_COMBO(at,         &kp AT,      LM1 LB1,     BSE, 100, 150)
ZMK_COMBO(bslh,       &kp BSLH,    LM2 LB2,     BSE, 100, 150)
ZMK_COMBO(excl,       &kp EXCL,    LM3 LB3,     BSE, 100, 150)

ZMK_COMBO(caret,      &kp CARET,   RT1 RM1,     BSE, 100, 150)
ZMK_COMBO(equal,      &kp EQUAL,   RT2 RM2,     BSE, 100, 150)
ZMK_COMBO(ampersand,  &kp AMPS,    RT3 RM3,     BSE, 100, 150)

ZMK_COMBO(dolar,      &kp DLLR,    RM1 RB1,     BSE, 100, 150)
ZMK_COMBO(hash,       &kp HASH,    RM2 RB2,     BSE, 100, 150)
ZMK_COMBO(qmark,      &kp QMARK,   RM3 RB3,     BSE, 100, 150)

ZMK_COMBO(openqmark,  &kp RA(FSLH),LM0 LB0,     BSE, 100, 150) 
ZMK_COMBO(openexcl,	  &kp RA(N1),  RM0 RB0,     BSE, 100, 150)

// diagonal combos
ZMK_COMBO(lbrace,     &kp RBRC,    LM1 LB2,     BSE, 140, 100)
ZMK_COMBO(rbrace,     &kp LBRC,    LM3 LB2,     BSE, 140, 100)
ZMK_COMBO(langle,     &kp GT,      LT1 LM2,     BSE, 140, 100)
ZMK_COMBO(rangle,     &kp LT,      LT3 LM2,     BSE, 140, 100)

ZMK_COMBO(lparent,    &kp LPAR,    RM1 RB2,     BSE, 140, 100) 
ZMK_COMBO(rparent,    &kp RPAR,    RM3 RB2,     BSE, 140, 100)
ZMK_COMBO(lbraket,    &kp LBKT,    RT1 RM2,     BSE, 140, 100)
ZMK_COMBO(rbraket,    &kp RBKT,    RT3 RM2,     BSE, 140, 100)

ZMK_COMBO(qmark,      &kp QMARK,   RT2 RM1,     BSE,  70, 150) 
ZMK_COMBO(excl,       &kp EXCL,    RT2 RM3,     BSE,  70, 150)

ZMK_LAYER(alpha,
				&kp B			&cl 6 H			&kp G										&comma_semi		&fslh_star		&kp J
&lm LALT C		&lm LCTRL S		&lt MOU N		&lt NAV T		&kp K		&dot_colon		&lt NUM A		&kp E			&rm RCTRL I		&rm LALT M
&kp P			&kp F			&kp L			&kp D			&kp V		&minu_plus		&kp U			&kp O			&kp Y			&kp W
							&mo_sk ACC LSHFT	&lt ACC R									&mt RGUI SPACE	&mo_sk ACC RSHFT
)

ZMK_LAYER(alpha2,
				&trans			&trans			&gu_dr										&trans			&trans			&trans
&trans			&trans			&kp RA(N)		&trans			&trans		&trans			&kp RA(X)		&kp RA(G)		&kp RA(B)		&trans
&trans			&trans			&trans			&trans			&trans		&trans			&kp RA(J)		&kp RA(DOT)		&trans			&trans
								&trans			&trans										&trans			&trans
)

ZMK_LAYER(navigation,
				&none			&none			&none										&kp LC(V)		&kp LC(C)		&kp LC(X)
&kp LSHFT		&kp LALT		&kp LCTRL		&none			&none		&kp LC(PLUS)	&kp LEFT		&kp DOWN		&kp UP			&kp RIGHT
&none			&none			&none			&none			&none		&kp LC(MINUS)	&kp HOME		&kp PG_DN		&kp PG_UP		&kp END
								&kp LC(Y)		&kp LC(Z)									&kp SPACE		&kp RSHFT
)

ZMK_LAYER(numbers,
				&none			&div			&mul										&none			&none			&none
&kp N3			&kp N2			&kp N1			&kp N0			&add		&none			&none			&kp DOT			&kp COMMA		&kp MINUS
&kp N7			&kp N6			&kp N5			&kp N4			&sub		&none			&none			&none			&none			&none
								&none			&kp N8										&kp N9			&kp SPACE
)

ZMK_LAYER(mouse,
				&none			&none			&none										&none			&kp DOWN		&kp UP
&kp LALT		&kp LCTRL		&none			&mkp LCLK		&none		&none			&mmv MOVE_LEFT	&mmv MOVE_DOWN	&mmv MOVE_UP	&mmv MOVE_RIGHT
&none			&mkp MB4		&mkp MB5		&none			&none		&none			&msc SCRL_LEFT	&msc SCRL_DOWN	&msc SCRL_UP	&msc SCRL_RIGHT
								&kp LSHFT		&mkp MCLK									&mkp RCLK		&kp RCLK
)

ZMK_LAYER(box_drawing,
				&none			&none			&none										&bd_l_dr		&bd_l_dh		&bd_l_dl
&none			&none			&bd_l_v			&bd_l_h			&none		&none			&bd_l_vr		&bd_l_vh		&bd_l_vl		&none
&none			&none			&none			&none			&none		&none			&bd_l_ul		&bd_l_uh		&bd_l_ul		&none
								&none			&tog BOX									&none			&none
)

// layers shenanigans for sequential combos

ZMK_LAYER(q, // 6
				&trans			&none			&qu_q Q Q									&trans			&trans			&trans
&trans			&trans			&trans			&trans			&trans		&trans			&trans			&trans			&trans			&trans
&trans			&trans			&trans			&trans			&trans		&trans			&trans			&trans			&trans			&trans
								&trans			&trans										&trans			&trans
)
