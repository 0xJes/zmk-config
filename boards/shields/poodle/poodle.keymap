#include <dt-bindings/zmk/keys.h>
#include <behaviors.dtsi>
#include <zmk-helpers/helper.h>
#include "keylabels.h"

#define LEFT_HAND_KEYS  LT3 LT2 LT1 LM4 LM3 LM2 LM1 LM0 LB4 LB3 LB2 LB1 LB0 LH0 LH1
#define RIGHT_HAND_KEYS RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RH0 RH1

#define BSE 0
#define NAV 1
#define NUM 2
#define GME 3

// behavior configuration

&caps_word { // enables kebab and snake case
	continue-list = <UNDER MINUS BSPC>;
};

&lt {
	flavor = "balanced";
	tapping-term-ms = <250>;
	quick-tap-ms = <150>;
	require-prior-idle-ms = <100>;
};

ZMK_HOLD_TAP(lm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <350>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <RIGHT_HAND_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(rm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <350>;
	quick-tap-ms = <200>; 
	hold-trigger-key-positions = <LEFT_HAND_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_MACRO(qu, bindings = <&kp Q &kp U>;)

ZMK_MOD_MORPH(min_plu,     bindings = <&kp MINUS>, <&kp PLUS>;  mods = <(MOD_RSFT)>;)
ZMK_MOD_MORPH(com_at,      bindings = <&kp COMMA>, <&kp AT>;    mods = <(MOD_RSFT)>;)
ZMK_MOD_MORPH(under_caret, bindings = <&kp UNDER>, <&kp CARET>; mods = <(MOD_LSFT)>;)


// ZMK_COMBO(grac,     &kp RA(GRAVE),RH0 RH1,         BSE,  50, 250)

//        NAME        OUTPUT          COMBOS    LAYERS TIME IDLE
// ALPHA
ZMK_COMBO(z,        &kp Z,        RT1 RT3,         BSE,  38,   0)
ZMK_COMBO(v,        &kp V,        RB2 RB3,         BSE,  38,   0)
ZMK_COMBO(qu,       &qu,          RT1 RT2,         BSE,  38,   0)
ZMK_COMBO(q,        &kp Q,        RT2 RT3,         BSE,  38,   0)
ZMK_COMBO(cedilla,  &kp RA(C),    RM4 RT3,         BSE,  38,   0)
ZMK_COMBO(enie,     &kp RA(N),    RM2 RT1,         BSE,  38,   0)

// CONTROL CHARACTERS
ZMK_COMBO(tab,      &kp TAB,      RM1 RM2,         BSE,  30, 180) // inc.
ZMK_COMBO(bspc,     &kp BSPC,     RM2 RM3, NUM BSE NAV,  50, 100)
ZMK_COMBO(del,      &kp DEL,      RM3 RM4, NUM BSE NAV,  80, 100)
ZMK_COMBO(ret,      &kp RET,      LM2 LM3, NUM BSE NAV,  40, 100)
ZMK_COMBO(esc,      &kp ESC,      LM1 LM3, NUM BSE NAV,  55, 180) // inc.

// SPECIAL
ZMK_COMBO(gaming,   &tog GME,     LT1 RT1,     GME BSE,  50, 250)
ZMK_COMBO(caps,     &caps_word,   LM1 RM1,         BSE,  40, 100)

// SYMBOL
ZMK_COMBO(under,    &kp UNDER,    RM1 RM3,         BSE,  45, 100)
ZMK_COMBO(star,     &kp STAR,     RT3 RM1,         BSE,  35, 250)
ZMK_COMBO(dqt,      &kp DQT,      LT2 LT1,         BSE,  35,   0)
ZMK_COMBO(blsh,     &kp BSLH,     LT2 LT3,         BSE, 150, 250)

ZMK_COMBO(colon,    &kp COLON,    LM1 LM4,         BSE,  45, 150)
ZMK_COMBO(semi,     &kp SEMI,     RM1 RM4,         BSE,  45, 150)
ZMK_COMBO(equal,    &kp EQUAL,    LM4 LM2,         BSE,  50, 300)
ZMK_COMBO(tilde,    &kp TILDE,    RM4 RM2,         BSE,  50, 300)
ZMK_COMBO(percent,  &kp PRCNT,    LB0 LM1,         BSE,  90, 250)
ZMK_COMBO(caret,    &kp CARET,    RB0 RM1,         BSE,  90, 250)
ZMK_COMBO(dolar,    &kp DLLR,     LM0 LT1,         BSE,  50, 250)
ZMK_COMBO(hash,     &kp HASH,     RM0 RT1,         BSE,  50, 250)
ZMK_COMBO(pipe,     &kp PIPE,     LB0 LB1,         BSE,  50, 300)
ZMK_COMBO(amps,     &kp AMPS,     RB0 RB1,         BSE,  50, 300)

// BRACES
ZMK_COMBO(l_par,    &kp LPAR,     LM1 LB1,         BSE,  50, 300)
ZMK_COMBO(r_par,    &kp RPAR,     RM1 RB1,         BSE,  50, 300)
ZMK_COMBO(l_bkt,    &kp LBKT,     LT1 LM1,         BSE,  50, 300)
ZMK_COMBO(r_bkt,    &kp RBKT,     RT1 RM1,         BSE,  50, 300)
ZMK_COMBO(l_brc,    &kp LBRC,     LM2 LB2,         BSE,  50, 300)
ZMK_COMBO(r_brc,    &kp RBRC,     RM2 RB2,         BSE,  50, 300)
ZMK_COMBO(lt,       &kp LT,       LT2 LM2,         BSE,  50, 300)
ZMK_COMBO(gt,       &kp GT,       RT2 RM2,         BSE,  50, 300)
ZMK_COMBO(l_excl,   &kp RA(N1),   LT3 LM3,         BSE,  50, 300)
ZMK_COMBO(r_excl,   &kp EXCL,     RT3 RM3,         BSE,  50, 150)
ZMK_COMBO(r_qmark,  &kp RA(FSLH), LM3 LB3,         BSE,  50, 500)
ZMK_COMBO(r_qmark,  &kp QMARK,    RM3 RB3,         BSE,  50, 150)

ZMK_LAYER(alpha,
				&kp J			&kp FSLH		&kp DOT										&kp M			&kp G			&kp W
&lm LALT C		&lm LCTRL I		&lt NAV E		&lm LSHFT A		&com_at		&kp K			&rm RSHFT H		&lt NUM T		&rm RCTRL N		&rm LALT S
&kp B			&kp Y			&kp O			&kp U			&min_plu	&kp X			&kp L			&kp D			&kp P			&kp F
								&kp SQT			&mt LGUI SPACE								&kp	R			&kp RA(SQT)
)

ZMK_LAYER(navigation,
				&none			&none			&none										&none			&none			&none
&none			&none			&none			&kp LSHFT		&none		&kp LC(PLUS)	&kp LEFT		&kp DOWN		&kp UP			&kp RIGHT
&none			&none			&none			&none			&none		&kp LC(MINUS)	&kp HOME		&kp PG_DN		&kp PG_UP		&kp END
								&none			&none										&none			&none
)

ZMK_LAYER(numbers,
				&none			&kp N9			&kp N8										&none			&none			&none
&kp N3			&kp N2			&kp N1			&kp N0			&none		&none			&none			&none			&none			&none
&kp N7			&kp N6 			&kp N5			&kp N4			&none		&none			&none			&none			&none			&none
								&none			&none										&none			&none
)

ZMK_LAYER(gaming, 
				&kp J			&kp UP			&kp DOT										&kp M			&kp G			&kp W
&kp C			&kp LEFT		&kp DOWN		&kp RIGHT		&kp ESC		&kp BSPC		&kp H			&kp T			&kp N			&kp S
&kp B			&kp Y			&kp O			&kp U			&kp TAB		&kp RET			&kp L			&kp D			&kp P			&kp F
								&kp X			&kp L 										&kp R			&kp Z
)


