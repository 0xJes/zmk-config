#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define HOST_OS 1 // Linux setting for unicode helpers
#include <zmk-helpers/helper.h>

#include "mouse.dtsi"
#include "box-drawing.dtsi"
#include "keylabels.h"

// layers
#define BSE 0
#define NAV 1
#define NUM 2
#define MOU 3
#define BOX 4

// key groups
#define LEFT_HAND_KEYS  LT3 LT2 LT1 LM4 LM3 LM2 LM1 LM0 LB4 LB3 LB2 LB1 LB0
#define RIGHT_HAND_KEYS RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMB_KEYS      LH1 LH0 RH0 RH1

// behavior configuration
&sk {
	release-after-ms = <2000>;
	quick-release; 
	ignore-modifiers;
};

&caps_word { // enables kebab and snake case
	continue-list = <UNDER MINUS BSPC>;
};

&lt {
	flavor = "balanced";
	tapping-term-ms = <250>;
	quick-tap-ms = <150>;
	require-prior-idle-ms = <100>;
};

&mt {
	flavor = "balanced";
	tapping-term-ms = <300>;
	quick-tap-ms = <180>;
	bindings = <&kp>, <&kp>;
};

ZMK_HOLD_TAP(lm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <300>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(rm,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <300>;
	quick-tap-ms = <200>; 
	hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(qu_q,
	flavor = "tap-preferred";
	tapping-term-ms = <190>;
	bindings = <&kp>, <&qu>;
)

ZMK_HOLD_TAP(cl, // hold-tap used for sequential combos 
	flavor = "tap-preferred";
	tapping-term-ms = <150>;
	quick-tap-ms = <100>;
	hold-trigger-key-positions = <LT1>;
	bindings = <&mo>, <&kp>;
)

ZMK_MACRO(add,    bindings = <&kp SPACE &kp PLUS &kp SPACE>;)
ZMK_MACRO(sub,    bindings = <&kp SPACE &kp MINUS &kp SPACE>;)
ZMK_MACRO(div,    bindings = <&kp SPACE &kp FSLH &kp SPACE>;)
ZMK_MACRO(mul,    bindings = <&kp SPACE &kp STAR &kp SPACE>;)
ZMK_MACRO(tgrave, bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;)
ZMK_MACRO(gu_dr,  bindings = <&kp G &kp RA(U)>;)
ZMK_MACRO(gu_dr,  bindings = <&kp G &kp RA(U)>;)
ZMK_MACRO(qu,     bindings = <&kp Q &kp U>;)
ZMK_MACRO(au_sbf, bindings = <&kp A &kp U>;)
ZMK_MACRO(ua_sbf, bindings = <&kp U &kp A>;)

ZMK_MOD_MORPH(sft_capsw,  bindings = <&sk LSFT>, <&caps_word>; mods = <(         MOD_LSFT)>;)
ZMK_MOD_MORPH(minu_plus,  bindings = <&kp MINUS>, <&kp PLUS>;  mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(fslh_star,  bindings = <&kp FSLH>, <&kp STAR>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(dot_colon,  bindings = <&kp DOT>, <&kp COLON>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(comma_semi, bindings = <&kp COMMA>, <&kp SEMI>;  mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(grave_x3,   bindings = <&kp GRAVE>, <&tgrave>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(lr_par,     bindings = <&kp LPAR>, <&kp RPAR>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(lr_brc,     bindings = <&kp LBRC>, <&kp RBRC>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(lr_bkt,     bindings = <&kp LBKT>, <&kp RBKT>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(lt_gt,      bindings = <&kp LT>, <&kp GT>;       mods = <(MOD_LSFT|MOD_RSFT)>;)

ZMK_COMBO(z,          &kp Z,       LT1 LT3,     BSE,  65,   0) // alpha combos
ZMK_COMBO(x,          &kp X,       LT3 LT2,     BSE,  65,   0)
ZMK_COMBO(enie,       &kp RA(N),   LB3 LB1,     BSE,  65,   0)
ZMK_COMBO(gudiaresis, &gu_dr,      LM3 LT1,     BSE,  65,   0)
ZMK_COMBO(acute_o,    &kp RA(DOT), RT1 RM2,     BSE,  80,   0)
ZMK_COMBO(acute_i,    &kp RA(B),   RT2 RM3,     BSE,  80,   0)
ZMK_COMBO(acute_a,    &kp RA(X),   RB1 RB3,     BSE,  65,   0)
ZMK_COMBO(acute_e,    &kp RA(G),   RT1 RT3,     BSE,  65,   0)

ZMK_COMBO(acute_u,    &kp RA(J),   RB2 RB4,     BSE,  90,   0)
ZMK_COMBO(qu,         &qu_q,       LT2 LT1,       5,  90,   0)

ZMK_COMBO(escape,     &kp ESC,     LM1 LM3,     BSE,  80,  75) // horz combos
ZMK_COMBO(return,     &kp RET,     LM2 LM3, BSE NAV,  70,  75) 
ZMK_COMBO(squote,     &kp SQT,     RT1 RT2,     BSE, 140,   0)
ZMK_COMBO(dquote,     &kp DQT,     RT2 RT3,     BSE, 140,   0)
ZMK_COMBO(tab,        &kp TAB,     RM1 RM2,     BSE,  45, 125)
ZMK_COMBO(underscore, &kp UNDER,   RM1 RM3,     BSE,  50,  75)
ZMK_COMBO(backspace,  &kp BSPC,    RM2 RM3, BSE NAV, 100,  80)
ZMK_COMBO(delete,     &kp DEL,     RM3 RM4, BSE NAV, 140, 120)
ZMK_COMBO(box_drwng,  &tog BOX,    LT2 RT2,     BSE,  50, 150)
ZMK_COMBO(bootldr,    &bootloader, LT3 RT3,     BSE,  50, 200)

ZMK_COMBO(percent,    &kp PRCNT,   LM0 LB0,     BSE, 100, 150) // vert combos
ZMK_COMBO(pipe,       &kp PIPE,    LT1 LM1,     BSE, 100, 150)
ZMK_COMBO(tilde,      &kp TILDE,   LT2 LM2,     BSE, 100, 150)
ZMK_COMBO(openexcl,   &kp RA(N1),  LT3 LM3,     BSE, 100, 150)
ZMK_COMBO(at,         &kp AT,      LM1 LB1,     BSE, 100, 150)
ZMK_COMBO(bslh,       &kp BSLH,    LM2 LB2,     BSE, 100, 150)
ZMK_COMBO(openquest,  &kp RA(FSLH),LM3 LB3,     BSE, 100, 150) 
ZMK_COMBO(caret,      &kp CARET,   RM0 RB0,     BSE, 100, 150)
ZMK_COMBO(ampersand,  &kp AMPS,    RT1 RM1,     BSE, 100, 150)
ZMK_COMBO(equal,      &kp EQUAL,   RT2 RM2,     BSE, 100, 150)
ZMK_COMBO(excl,       &kp EXCL,    RT3 RM3,     BSE, 100, 150) 
ZMK_COMBO(dolar,      &kp DLLR,    RM1 RB1,     BSE, 100, 150)
ZMK_COMBO(hash,       &kp HASH,    RM2 RB2,     BSE, 100, 150)
ZMK_COMBO(quest,      &kp QMARK,   RM3 RB3,     BSE, 100, 150)

ZMK_COMBO(lbrace,     &lr_par,     LM1 LB2,     BSE, 140, 100) // diag combLs
ZMK_COMBO(rbrace,     &lr_brc,     LM3 LB2,     BSE, 140, 100)
ZMK_COMBO(langle,     &lr_bkt,     LT1 LM2,     BSE, 140, 100)
ZMK_COMBO(rangle,     &lt_gt,      LT3 LM2,     BSE, 140, 100)

ZMK_LAYER(alpha,
				&kp B			&cl 5 H			&kp G										&comma_semi		&fslh_star		&kp J
&lm LALT C		&lm LCTRL S		&lt MOU N		&lt NAV T		&kp K		&dot_colon		&lt NUM A		&kp E			&rm RCTRL I		&rm LALT M
&kp P			&kp F			&kp L			&kp D			&kp V		&minu_plus		&kp U			&kp O			&kp Y			&kp W
							    &sft_capsw		&mt LGUI R									&kp SPACE	    &sk RSHFT
)

ZMK_LAYER(navigation,
				&none			&none			&none										&kp LC(V)		&kp LC(C)		&kp LC(X)
&kp LSHFT		&kp LALT		&kp LCTRL		&none			&none		&kp LC(PLUS)	&kp LEFT		&kp DOWN		&kp UP			&kp RIGHT
&none			&none			&none			&none			&none		&kp LC(MINUS)	&kp HOME		&kp PG_DN		&kp PG_UP		&kp END
								&kp LC(Y)		&kp LC(Z)									&kp SPACE		&kp RSHFT
)

ZMK_LAYER(numbers,
				&none			&div			&mul										&none			&kp RA(N2)		&kp RA(N3)
&kp N3			&kp N2			&kp N1			&kp N0			&add		&none			&none			&kp DOT			&kp COMMA		&kp MINUS
&kp N7			&kp N6			&kp N5			&kp N4			&sub		&none			&none			&kp RA(SEMI)	&none			&none
								&none			&kp N8										&kp N9			&kp SPACE
)

ZMK_LAYER(mouse,
				&none			&none			&none										&none			&kp DOWN		&kp UP
&kp LALT		&kp LCTRL		&none			&kp LGUI		&none			&mkp MB5	&mmv MOVE_LEFT	&mmv MOVE_DOWN	&mmv MOVE_UP	&mmv MOVE_RIGHT
&none			&none			&none			&none			&none			&mkp MB4	&msc SCRL_LEFT	&msc SCRL_DOWN	&msc SCRL_UP	&msc SCRL_RIGHT
								&kp LSHFT		&mkp LCLK									&mkp RCLK		&mkp MCLK
)

ZMK_LAYER(box_drawing,
				&none			&none			&none										&bd_l_dr		&bd_l_dh		&bd_l_dl
&none			&none			&bd_l_v			&bd_l_h			&none		&none			&bd_l_vr		&bd_l_vh		&bd_l_vl		&none
&none			&none			&none			&none			&none		&none			&bd_l_ul		&bd_l_uh		&bd_l_ul		&none
								&none			&tog BOX									&none			&none
)

 
// layer-tap shenanigans to enable "sequential combos" where order matters

ZMK_LAYER(q, // 6 hg: qu
				&trans			&trans			&trans										&trans			&trans			&trans
&trans			&trans			&trans			&trans			&trans		&trans			&trans			&trans			&trans			&trans
&trans			&trans			&trans			&trans			&trans		&trans			&trans			&trans			&trans			&trans
								&trans			&trans										&trans			&trans
)
