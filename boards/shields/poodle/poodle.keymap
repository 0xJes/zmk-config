// TODO: Ordered combos instead of shft+combo
// TODO: AU sfb mitigation
// TODO: Move important vert combos to horz combos
// TODO: Use double tap on sticky shfts instead of combo for caps-word
// TODO: Implement caps-word behavior that shifts the minus key 
// TODO: Use ACS for hrm on all layers
// TODO: Format combos by side

#define ZMK_MOUSE_DEFAULT_SCRL_VAL 30

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include "zmk-helpers/helper.h"
#include "keylabels.h"

// Layers------------------------------------------------------------------------------------------
#define BSE 0
#define NAV 1
#define NUM 2
#define MOU 3

// All keys in each side---------------------------------------------------------------------------
#define LEFT_HAND_KEYS LT3 LT2 LT1 LM4 LM3 LM2 LM1 LM0 LB4 LB3 LB2 LB1 LB0
#define RIGHT_HAND_KEYS RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMB_KEYS LH1 LH0 RH0 RH1

// Common shortcuts--------------------------------------------------------------------------------
#define CUT      &kp LC(X)
#define PASTE    &kp LC(V)
#define COPY     &kp LC(C)
#define ZOOM_IN  &kp LC(PLUS)
#define ZOOM_OUT &kp LC(MINUS)
#define UNDO     &kp LC(Z)
#define REDO     &kp LC(Y)

// Mouse operations--------------------------------------------------------------------------------
#define WHEEL_LEFT  &msc SCRL_LEFT
#define WHEEL_UP    &msc SCRL_UP
#define WHEEL_DOWN  &msc SCRL_DOWN
#define WHEEL_RIGHT &msc SCRL_RIGHT
#define CURSOR_LEFT  &mmv MOVE_LEFT
#define CURSOR_UP    &mmv MOVE_UP
#define CURSOR_DOWN  &mmv MOVE_DOWN
#define CURSOR_RIGHT &mmv MOVE_RIGHT
#define FORWARD      &mkp MB5
#define BACK         &mkp MB4

// Macros------------------------------------------------------------------------------------------
ZMK_MACRO(au,			bindings = <&kp A &kp U>;)
ZMK_MACRO(ua,			bindings = <&kp U &kp A>;)
ZMK_MACRO(gu,			bindings = <&kp G &kp U>;)
ZMK_MACRO(gu_d,			bindings = <&kp G &kp RA(U)>;)
ZMK_MACRO(t_period,		bindings = <&kp DOT &kp DOT &kp DOT>;)
ZMK_MACRO(path_here,	bindings = <&kp DOT &kp FSLH &kp STAR>;)
ZMK_MACRO(excl_quest,	bindings = <&kp EXCL &kp QMARK>;)
ZMK_MACRO(add,			bindings = <&kp SPACE &kp PLUS  &kp SPACE>;)
ZMK_MACRO(sub,			bindings = <&kp SPACE &kp MINUS &kp SPACE>;)
ZMK_MACRO(div,			bindings = <&kp SPACE &kp FSLH  &kp SPACE>;)
ZMK_MACRO(mul,			bindings = <&kp SPACE &kp STAR  &kp SPACE>;)

ZMK_MACRO(qu,
	wait-ms = <0>;
	tap-ms = <0>;
	bindings = <&kp Q &kp U>;
)

// Micelaneous-------------------------------------------------------------------------------------
&sk {
    release-after-ms = <2000>;
    quick-release; 
    ignore-modifiers;
};

&caps_word {
    continue-list = <UNDER MINUS BSPC>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
};

// Hold Taps---------------------------------------------------------------------------------------

ZMK_HOLD_TAP(qu_q,
	flavor = "tap-preferred";
	tapping-term-ms = <120>;
	bindings = <&kp>, <&qu>;
)

ZMK_HOLD_TAP(gu_espgu,
	flavor = "tap-preferred";
	tapping-term-ms = <150>;
	bindings = <&gu_d>, <&gu>;
)

ZMK_HOLD_TAP(hml,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(hmr,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
	hold-trigger-on-release;
	bindings = <&kp>, <&kp>;
)

ZMK_HOLD_TAP(lsf,
	flavor = "balanced";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	bindings = <&kp>, <&sk>;
)

ZMK_HOLD_TAP(spc,
	flavor = "hold-preferred";
	require-prior-idle-ms = <100>;
	tapping-term-ms = <250>;
	quick-tap-ms = <200>;
	bindings = <&kp>, <&kp>;
)

// Keys with special shifted versions--------------------------------------------------------------
ZMK_MOD_MORPH(comma,    bindings = <&kp COMMA>, <&excl_quest>;  mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(slash,    bindings = <&kp FSLH>,  <&path_here>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(tperiod,  bindings = <&kp DOT>,   <&t_period>;    mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(currency, bindings = <&kp DLLR>,  <&kp RA(N5)>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(RL_excl,  bindings = <&kp EXCL>,  <&kp RA(N1)>;   mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(RL_quest, bindings = <&kp QMARK>, <&kp RA(FSLH)>; mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(LR_paren, bindings = <&kp LPAR>,  <&kp RPAR>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(LR_brace, bindings = <&kp LBRC>,  <&kp RBRC>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(LR_brack, bindings = <&kp LBKT>,  <&kp LBKT>;     mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(LR_angle, bindings = <&kp LT>,    <&kp GT>;       mods = <(MOD_LSFT|MOD_RSFT)>;)

// Combos: Alpha-----------------------------------------------------------------------------------
ZMK_COMBO(z,            &kp Z, LB3 LB4, BSE    , 100,   0) // p f
ZMK_COMBO(x,            &kp X, LT3 LT2, BSE    , 100,   0) // b h
ZMK_COMBO(enie,     &kp RA(N), LB1 LB3, BSE    ,  50,   0) // f d
// ZMK_COMBO(au,             &au, RM1 RB1, BSE    , 100,   0)
// ZMK_COMBO(ua,             &ua, RT1 RM1, BSE    , 100,   0)
ZMK_COMBO(qu,       &qu_q Q Q, LB1 LB2, BSE    , 100,   0) // l d
ZMK_COMBO(gu,   &gu_espgu G G, LT1 LT3, BSE    , 100,   0) // b g

// Combos: Vertical--------------------------------------------------------------------------------
ZMK_COMBO(plus,      &kp PLUS, LT1 LM1, BSE    ,  85,   0) // g t
ZMK_COMBO(hash,      &kp HASH, RT1 RM1, BSE    ,  85,   0) // , a
ZMK_COMBO(and,       &kp AMPS, RM1 RB1, BSE    ,  85,   0) // a u
ZMK_COMBO(or,        &kp PIPE, LM1 LB1, BSE    ,  85,   0) // t d
ZMK_COMBO(asterisk,  &kp STAR, RT2 RM2, BSE    ,  85,   0) // / e
ZMK_COMBO(backslash, &kp BSLH, LT2 LM2, BSE    ,  85,   0) // h n
ZMK_COMBO(equal,    &kp EQUAL, RM2 RB2, BSE    ,  60,   0) // n l
ZMK_COMBO(tilde,    &kp TILDE, LM2 LB2, BSE    ,  60,   0) // e o
ZMK_COMBO(currency, &currency, RT3 RM3, BSE    ,  85,   0) // j i
ZMK_COMBO(at,          &kp AT, LT3 LM3, BSE    ,  60,   0) // b s
ZMK_COMBO(caret,    &kp CARET, RM3 RB3, BSE    ,  60,   0) // s f
ZMK_COMBO(prcnt,    &kp PRCNT, LM3 LB3, BSE    ,  60,   0) // i y
ZMK_COMBO(grave,    &kp GRAVE, LM4 LB4, BSE    ,  60,   0) // c p

// Combos: horizontal------------------------------------------------------------------------------
ZMK_COMBO(bootl,  &bootloader, LT3 RT3, BSE    ,  60, 100) // b j
ZMK_COMBO(colon,    &kp COLON, RT1 RT2, BSE    ,  60, 100) // , /
ZMK_COMBO(semi,      &kp SEMI, RT2 RT3, BSE    ,  60, 100) // / j

// Combos: Home row-------------------------------------------------------------------------------
ZMK_COMBO(escape,     &kp ESC, LM1 LM3, BSE    ,  50,  75) // s t
ZMK_COMBO(enter,      &kp RET, LM2 LM3, BSE NAV,  70,  75) // e i
ZMK_COMBO(tab,        &kp TAB, RM1 RM2, BSE    ,  60,  75) // a e
ZMK_COMBO(uscore,   &kp UNDER, RM1 RM3, BSE    , 100,  75) // a i
ZMK_COMBO(backspace, &kp BSPC, RM2 RM3, BSE NAV, 150,  75) // e i
ZMK_COMBO(delete,     &kp DEL, RM3 RM4, BSE NAV, 140,  75) // i m
ZMK_COMBO(cps_wrd, &caps_word, LM2 RM2, BSE    ,  50,  75) // n e

// Combos: Diagonal pairs--------------------------------------------------------------------------
ZMK_COMBO(quote,      &kp SQT, LT1 LM2, BSE    , 110, 100) // n g
ZMK_COMBO(dquote,     &kp DQT, RT1 RM2, BSE    , 110, 100) // , e
ZMK_COMBO(parent,   &LR_paren, RM1 RB2, BSE    , 110, 100) // a l
ZMK_COMBO(braces,   &LR_brace, LM1 LB2, BSE    , 110, 100) // t l
ZMK_COMBO(brackets, &LR_brack, RM3 RB2, BSE    , 110, 100) // i o
ZMK_COMBO(angles,   &LR_angle, LM3 LB2, BSE    , 110, 100) // s l
ZMK_COMBO(excl,      &RL_excl, RT3 RM2, BSE    , 110, 100) // b n
ZMK_COMBO(quest,    &RL_quest, LT3 LM2, BSE    , 110, 100) // j e

ZMK_LAYER(base,
				&kp B			&kp H			&kp G										&comma			&slash			&kp J
&kp C			&hml LALT S		&hml LCTRL N	&lt NAV T		&kp K		&tperiod		&lt NUM A		&hmr RCTRL E	&hmr LALT I		&kp M
&kp P			&kp F			&kp L			&kp D			&kp V		&kp MINUS		&kp U			&kp O			&kp Y			&kp W
								&lsf RA(SQT) LSHFT	&lt MOU R									&spc RWIN SPACE	&sk RSHFT
)

ZMK_LAYER(navigation,
			&none		&none		&none							PASTE		COPY		CUT
&kp LALT	&kp LCTRL	&kp LSHFT	&none		&none	ZOOM_IN		&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT
&none		&none		&none		&none		&none	ZOOM_OUT	&kp HOME	&kp PG_DN	&kp PG_UP	&kp END
						REDO		UNDO							&kp SPACE	&kp RSHFT
)

ZMK_LAYER(numbers,
			&none		&div		&mul							&none		&none		&none
&kp N3		&kp N2		&kp N1		&kp N0		&add	&none		&none		&kp DOT		&kp COMMA	&kp MINUS
&kp N7		&kp N6		&kp N5		&kp N4		&sub	&none		&none		&none		&none		&none
						&none		&kp N8							&kp N9		&kp SPACE
)

ZMK_LAYER(mouse,
			&none		&none		&none							&none		&kp DOWN	&kp UP
&kp LALT	&kp LCTRL	&kp LSHFT	&mkp MCLK	&none	&none		CURSOR_LEFT	CURSOR_DOWN	CURSOR_UP	CURSOR_RIGHT
&none		BACK		FORWARD		&none		&none	&none		WHEEL_LEFT	WHEEL_DOWN	WHEEL_UP	 WHEEL_RIGHT
						&none		&none							&mkp LCLK   &mkp RCLK
)
